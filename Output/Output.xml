<?xml version="1.0" encoding="utf-8"?>
<robot generated="20240313 19:44:01.813" generator="Rebot 6.0.2 (Python 3.12.1 on win32)" rpa="false" schemaversion="3">
 <suite id="s1" name="Tests" source="C:\SAP_Testing\SAPtesting\Tests">
  <kw name="Setup highest level suite" type="SETUP">
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:03.736">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:03.736" starttime="20240313 19:43:03.736" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:03.736">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20240313 19:43:03.736" starttime="20240313 19:43:03.736" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:03.752">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20240313 19:43:03.752" starttime="20240313 19:43:03.736" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:03.752">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:03.754">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.752" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.752" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.736" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:03.754">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.754" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.754" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:03.754">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.754" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:03.754" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:03.754" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.406">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:07.406">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:07.406">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.406">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:07.406">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:07.406">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.406">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001E676C6D5E0&gt;
         </msg>
         <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:07.406">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001E676C6D5E0&gt;
        </msg>
        <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.406">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:07.406" starttime="20240313 19:43:07.406" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.421">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.406" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.421" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.421" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.421" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.406" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.421" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.421">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001E676C6D5E0&gt;
        </msg>
        <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.421" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.406" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:03.754" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:03.754" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:03.754" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:07.421">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:07.421" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:03.736">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:03.736" starttime="20240313 19:43:03.736" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:03.736">
      ${screenshotCount} = 1_1
     </msg>
     <status endtime="20240313 19:43:03.736" starttime="20240313 19:43:03.736" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:03.752">
      ${screenshotCount} = 1_1
     </msg>
     <status endtime="20240313 19:43:03.752" starttime="20240313 19:43:03.736" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:03.752">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:03.754">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\1\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\1\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.752" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.752" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.736" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:03.754">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.754" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.754" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:03.754">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:03.754" starttime="20240313 19:43:03.754" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:03.754" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:03.754" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:07.274">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001E120A3D430&gt;
         </msg>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001E120A3D430&gt;
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:07.274">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.274">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001E120A3D430&gt;
        </msg>
        <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:03.754" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:03.754" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:03.754" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:07.274">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:07.274" starttime="20240313 19:43:07.274" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:09.059">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:09.059" starttime="20240313 19:43:09.059" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:09.069">
      ${screenshotCount} = 2_1
     </msg>
     <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.069" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:09.069">
      ${screenshotCount} = 2_1
     </msg>
     <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.069" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:09.069">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:09.069">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\2\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\2\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.069" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.069" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.059" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:09.069">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.069" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.069" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:09.069">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:09.069" starttime="20240313 19:43:09.069" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:09.069" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:09.069" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:12.323">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:12.323">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:12.323">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:12.323">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:12.323">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:12.323">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:12.323">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:12.323" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:12.333">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000271F302D2B0&gt;
         </msg>
         <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:12.333">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000271F302D2B0&gt;
        </msg>
        <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.323" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:12.333">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:12.333">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:12.333">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000271F302D2B0&gt;
        </msg>
        <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.323" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:09.069" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:09.069" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:09.069" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:12.333">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:12.333" starttime="20240313 19:43:12.333" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:19.368">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:19.368" starttime="20240313 19:43:19.368" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:19.368">
      ${screenshotCount} = 3_1
     </msg>
     <status endtime="20240313 19:43:19.368" starttime="20240313 19:43:19.368" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:19.368">
      ${screenshotCount} = 3_1
     </msg>
     <status endtime="20240313 19:43:19.368" starttime="20240313 19:43:19.368" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:19.368">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:19.368">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\3\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\3\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:19.368" starttime="20240313 19:43:19.368" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:19.379" starttime="20240313 19:43:19.368" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:19.379" starttime="20240313 19:43:19.368" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:19.379">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:19.379" starttime="20240313 19:43:19.379" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:19.379" starttime="20240313 19:43:19.379" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:19.379">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:19.379" starttime="20240313 19:43:19.379" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:19.379" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:19.379" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:22.624">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:22.624">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:22.624">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:22.624">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:22.624">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:22.624">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:22.624">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002A838B0E780&gt;
         </msg>
         <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:22.624">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002A838B0E780&gt;
        </msg>
        <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:22.624">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:22.624" starttime="20240313 19:43:22.624" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:22.640">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.624" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.640" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.640" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.640" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.624" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.640" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.640">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002A838B0E780&gt;
        </msg>
        <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.640" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.624" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:19.379" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:19.379" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:19.379" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:22.640">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:22.640" starttime="20240313 19:43:22.640" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:24.664">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:24.664" starttime="20240313 19:43:24.664" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:24.664">
      ${screenshotCount} = 4_1
     </msg>
     <status endtime="20240313 19:43:24.664" starttime="20240313 19:43:24.664" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:24.664">
      ${screenshotCount} = 4_1
     </msg>
     <status endtime="20240313 19:43:24.664" starttime="20240313 19:43:24.664" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:24.680">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:24.680">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\4\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\4\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:24.680" starttime="20240313 19:43:24.664" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:24.680" starttime="20240313 19:43:24.664" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:24.680" starttime="20240313 19:43:24.664" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:24.680">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:24.680" starttime="20240313 19:43:24.680" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:24.680" starttime="20240313 19:43:24.680" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:24.680">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:24.680" starttime="20240313 19:43:24.680" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:24.680" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:24.680" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:28.010">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002147A3BD160&gt;
         </msg>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002147A3BD160&gt;
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:28.010">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:28.010">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002147A3BD160&gt;
        </msg>
        <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:24.680" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:24.680" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:24.680" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:28.010">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:28.010" starttime="20240313 19:43:28.010" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:35.101">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:35.101">
      ${screenshotCount} = 5_1
     </msg>
     <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:35.101">
      ${screenshotCount} = 5_1
     </msg>
     <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:35.101">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:35.101">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\5\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\5\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:35.101">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:35.101">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:35.101" starttime="20240313 19:43:35.101" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:35.101" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:35.101" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:39.362">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000021C91BAD940&gt;
         </msg>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000021C91BAD940&gt;
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:39.362">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:39.362">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000021C91BAD940&gt;
        </msg>
        <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:35.101" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:35.101" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:35.101" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:39.362">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:39.362" starttime="20240313 19:43:39.362" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:41.109">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:41.109" starttime="20240313 19:43:41.109" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:41.109">
      ${screenshotCount} = 6_1
     </msg>
     <status endtime="20240313 19:43:41.109" starttime="20240313 19:43:41.109" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:41.109">
      ${screenshotCount} = 6_1
     </msg>
     <status endtime="20240313 19:43:41.109" starttime="20240313 19:43:41.109" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:41.109">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:41.125">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\6\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\6\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:41.125" starttime="20240313 19:43:41.109" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:41.125" starttime="20240313 19:43:41.109" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:41.125" starttime="20240313 19:43:41.109" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:41.125">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:41.125" starttime="20240313 19:43:41.125" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:41.125" starttime="20240313 19:43:41.125" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:41.125">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:41.125" starttime="20240313 19:43:41.125" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:41.125" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:41.125" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:44.605">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000024D7DC5D5E0&gt;
         </msg>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000024D7DC5D5E0&gt;
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.605">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.605">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000024D7DC5D5E0&gt;
        </msg>
        <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:41.125" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:41.125" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:41.125" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:44.605">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:44.605" starttime="20240313 19:43:44.605" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:41.430">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:41.430">
      ${screenshotCount} = 7_1
     </msg>
     <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:41.430">
      ${screenshotCount} = 7_1
     </msg>
     <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:41.430">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:41.430">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\7\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\7\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:41.430">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:41.430">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:41.430" starttime="20240313 19:43:41.430" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:41.430" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:41.430" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.774">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:44.774">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:44.774">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.774">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:44.774">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:44.774">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:44.774">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:44.774" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.784">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001F9E1DB8CE0&gt;
         </msg>
         <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.774" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:44.784">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001F9E1DB8CE0&gt;
        </msg>
        <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.774" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.784">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:44.784">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:44.784">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001F9E1DB8CE0&gt;
        </msg>
        <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.774" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:41.430" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:41.430" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:41.430" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:44.784">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:44.784" starttime="20240313 19:43:44.784" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:51.425">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:51.425" starttime="20240313 19:43:51.425" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:51.425">
      ${screenshotCount} = 8_1
     </msg>
     <status endtime="20240313 19:43:51.425" starttime="20240313 19:43:51.425" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:51.425">
      ${screenshotCount} = 8_1
     </msg>
     <status endtime="20240313 19:43:51.425" starttime="20240313 19:43:51.425" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:51.425">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:51.440">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\8\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\8\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:51.440" starttime="20240313 19:43:51.425" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:51.440" starttime="20240313 19:43:51.425" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:51.440" starttime="20240313 19:43:51.425" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:51.440">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:51.440" starttime="20240313 19:43:51.440" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:51.440" starttime="20240313 19:43:51.440" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:51.440">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:51.440" starttime="20240313 19:43:51.440" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:51.440" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:51.440" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:54.832">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001D615B5D250&gt;
         </msg>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001D615B5D250&gt;
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:54.832">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:54.832">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001D615B5D250&gt;
        </msg>
        <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:51.440" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:51.440" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:51.440" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:54.832">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:54.832" starttime="20240313 19:43:54.832" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:51.531">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240313 19:43:51.531" starttime="20240313 19:43:51.531" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:51.547">
      ${screenshotCount} = 9_1
     </msg>
     <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:51.547">
      ${screenshotCount} = 9_1
     </msg>
     <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240313 19:43:51.547">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240313 19:43:51.547">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\9\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\9\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:51.547">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240313 19:43:51.547">
      ${web_test_check} = True
     </msg>
     <status endtime="20240313 19:43:51.547" starttime="20240313 19:43:51.547" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         &amp;{browser_information} = { browser_version=122.0.6261.128 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:51.547" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         Set suite metadata 'test_browser_version' to value '122.0.6261.128'.
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:51.547" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:56.038">
          Not executing on Docker
         </msg>
         <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240313 19:43:56.038">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:56.038">
          ${docker_check} = False
         </msg>
         <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:56.038">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240313 19:43:56.038">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240313 19:43:56.038">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:56.038">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240313 19:43:56.038" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:56.049">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000021625FDD7C0&gt;
         </msg>
         <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.038" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:56.049">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000021625FDD7C0&gt;
        </msg>
        <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.038" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:56.049">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240313 19:43:56.049">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="NOT RUN"/>
          </kw>
          <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="NOT RUN"/>
         </iter>
         <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="NOT RUN"/>
        </for>
        <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:56.049">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000021625FDD7C0&gt;
        </msg>
        <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.038" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:51.547" status="PASS"/>
     </kw>
     <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:51.547" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:51.547" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240313 19:43:56.049">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240313 19:43:56.049" starttime="20240313 19:43:56.049" status="PASS"/>
   </kw>
   <status endtime="20240313 19:43:07.421" starttime="20240313 19:43:03.736" status="PASS"/>
  </kw>
  <suite id="s1-s1" name="Test Migration tcodes" source="C:\SAP_Testing\SAPtesting\Tests\Test_Migration_tcodes.robot">
   <kw library="Common_SAP_Tcodefn" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('SAP_SERVER')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="WARN" timestamp="20240313 19:43:07.475">
      Failed to fetch value for field: Sym.Dev.SAP_SERVER
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:07.490">
      Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'SAP_SERVER'
     </msg>
     <msg level="INFO" timestamp="20240313 19:43:07.490">
      Starting process:
""
     </msg>
     <msg level="FAIL" timestamp="20240313 19:43:07.490">
      OSError: [WinError 87] The parameter is incorrect
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:07.522">
      Failed to fetch value for field: Sym.Dev.SAP_SERVER
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:07.522">
      Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'SAP_SERVER'
     </msg>
     <status endtime="20240313 19:43:07.522" starttime="20240313 19:43:07.475" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      10s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Open Connection">
     <arg>
      ${symvar('SAP_connection')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('Client_Id')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('User_Name')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      ${symvar('User_Password')}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="NOT RUN"/>
    </kw>
    <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.475" status="FAIL"/>
   </kw>
   <test id="s1-s1-t1" line="9" name="Executing SM69">
    <tag>
     migration
    </tag>
    <tag>
     Regression
    </tag>
    <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="FAIL">
     Parent suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also parent suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
    </status>
   </test>
   <kw library="Common_SAP_Tcodefn" name="System Logout" type="TEARDOWN">
    <kw library="SAP_Tcode_Library" name="Run Transaction">
     <arg>
      /nex
     </arg>
     <doc>
      Runs a Sap transaction. An error is given when an unknown transaction is specified.
     </doc>
     <msg level="FAIL" timestamp="20240313 19:43:07.537">
      AttributeError: 'int' object has no attribute 'findById'
     </msg>
     <status endtime="20240313 19:43:07.537" starttime="20240313 19:43:07.537" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:12.537">
      Slept 5 seconds
     </msg>
     <status endtime="20240313 19:43:12.537" starttime="20240313 19:43:07.537" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      10
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:22.538">
      Slept 10 seconds
     </msg>
     <status endtime="20240313 19:43:22.538" starttime="20240313 19:43:12.537" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:22.538" starttime="20240313 19:43:07.537" status="FAIL">
     AttributeError: 'int' object has no attribute 'findById'
    </status>
   </kw>
   <status endtime="20240313 19:43:22.538" starttime="20240313 19:43:07.421" status="FAIL">
    Suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
   </status>
  </suite>
  <suite id="s1-s2" name="Sample" source="C:\SAP_Testing\SAPtesting\Tests\Sample">
   <suite id="s1-s2-s1" name="AAAA-123 Hello World User Story" source="C:\SAP_Testing\SAPtesting\Tests\Sample\AAAA-123 Hello World User Story.robot">
    <kw library="BuiltIn" name="Log To Console" type="SETUP">
     <arg>
      Keyword is executed once before first test in the suite
     </arg>
     <doc>
      Logs the given message to the console.
     </doc>
     <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
    </kw>
    <test id="s1-s2-s1-t1" line="11" name="Hello World is tested correctly">
     <kw library="BuiltIn" name="Log To Console" type="SETUP">
      <arg>
       This keyword is executed before every test
      </arg>
      <doc>
       Logs the given message to the console.
      </doc>
      <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
     </kw>
     <kw library="Support_Sample" name="Given I concatenate hello with world">
      <kw library="Support_Sample" name="Concatenates hello with world">
       <kw library="BuiltIn" name="Set Suite Variable">
        <arg>
         ${result}
        </arg>
        <arg>
         helloworld
        </arg>
        <doc>
         Makes a variable available everywhere within the scope of the current suite.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:07.305">
         ${result} = helloworld
        </msg>
        <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
     </kw>
     <kw library="Support_Sample" name="Then I receive result as helloworld">
      <kw library="Support_Sample" name="Results received as helloworld">
       <kw library="BuiltIn" name="Should Be Equal">
        <arg>
         ${result}
        </arg>
        <arg>
         helloworld
        </arg>
        <doc>
         Fails if the given objects are unequal.
        </doc>
        <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Log To Console" type="TEARDOWN">
      <arg>
       This keyword is executed after every test
      </arg>
      <doc>
       Logs the given message to the console.
      </doc>
      <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
     </kw>
     <doc>
      Test to check that the setup is working currently through string
     </doc>
     <tag>
      AAAA-123
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      helloworld
     </tag>
     <tag>
      regression
     </tag>
     <tag>
      Sample
     </tag>
     <tag>
      SampleTest
     </tag>
     <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
    </test>
    <kw library="BuiltIn" name="Log To Console" type="TEARDOWN">
     <arg>
      Keyword is executed once after last test in the suite
     </arg>
     <doc>
      Logs the given message to the console.
     </doc>
     <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.305" status="PASS"/>
    </kw>
    <doc>
     Checks for setup to work correctly. Jira-ID: AAAA-123
    </doc>
    <status endtime="20240313 19:43:07.305" starttime="20240313 19:43:07.289" status="PASS"/>
   </suite>
   <suite id="s1-s2-s2" name="AAAA-124 User Story to test selenium navigation" source="C:\SAP_Testing\SAPtesting\Tests\Sample\AAAA-124 User Story to test selenium navigation.robot">
    <kw library="BuiltIn" name="Log To Console" type="SETUP">
     <arg>
      Keyword is executed once before first test in the suite
     </arg>
     <doc>
      Logs the given message to the console.
     </doc>
     <status endtime="20240313 19:43:12.354" starttime="20240313 19:43:12.354" status="PASS"/>
    </kw>
    <test id="s1-s2-s2-t1" line="14" name="Visualization is received correctly">
     <kw library="BuiltIn" name="Log To Console" type="SETUP">
      <arg>
       This keyword is executed before every test
      </arg>
      <doc>
       Logs the given message to the console.
      </doc>
      <status endtime="20240313 19:43:12.354" starttime="20240313 19:43:12.354" status="PASS"/>
     </kw>
     <kw library="Support_Sample" name="Given I navigate to visualization website">
      <kw library="Support_Sample" name="Navigated to visualization website">
       <kw library="SeleniumLibrary" name="Open Browser">
        <arg>
         ${wvar('robot_site')}
        </arg>
        <arg>
         ${browser}
        </arg>
        <arg>
         options=${global_browser_options}
        </arg>
        <doc>
         Opens a new browser instance to the optional ``url``.
        </doc>
        <msg level="WARN" timestamp="20240313 19:43:12.354">
         Failed to fetch value for field: Web.Dev.robot_site
        </msg>
        <msg level="WARN" timestamp="20240313 19:43:12.364">
         Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'robot_site'
        </msg>
        <msg level="INFO" timestamp="20240313 19:43:12.364">
         Opening browser 'chrome' to base url ''.
        </msg>
        <status endtime="20240313 19:43:13.516" starttime="20240313 19:43:12.354" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Log">
        <arg>
         Opened ${wvar('robot_site')} on browser ${browser}
        </arg>
        <doc>
         Logs the given message with the given level.
        </doc>
        <msg level="WARN" timestamp="20240313 19:43:13.517">
         Failed to fetch value for field: Web.Dev.robot_site
        </msg>
        <msg level="WARN" timestamp="20240313 19:43:13.525">
         Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'robot_site'
        </msg>
        <msg level="INFO" timestamp="20240313 19:43:13.531">
         Opened  on browser chrome
        </msg>
        <status endtime="20240313 19:43:13.531" starttime="20240313 19:43:13.516" status="PASS"/>
       </kw>
       <status endtime="20240313 19:43:13.531" starttime="20240313 19:43:12.354" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:13.531" starttime="20240313 19:43:12.354" status="PASS"/>
     </kw>
     <kw library="Support_Sample" name="When I check for presence of data">
      <kw library="Support_Sample" name="checks for data presence in website">
       <kw library="SeleniumLibrary" name="Element Should Be Visible">
        <arg>
         ${wvar('robot_check_id')}
        </arg>
        <doc>
         Verifies that the element identified by ``locator`` is visible.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:13.533">
         Web.Dev.robot_check_id: xpath=//*[@class="title"]
        </msg>
        <kw library="SeleniumLibrary" name="Capture Page Screenshot">
         <doc>
          Takes a screenshot of the current page and embeds it into a log file.
         </doc>
         <msg html="true" level="INFO" timestamp="20240313 19:43:13.720">
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="2-selenium-screenshot-1.png"&gt;&lt;img src="2-selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;
         </msg>
         <status endtime="20240313 19:43:13.720" starttime="20240313 19:43:13.598" status="PASS"/>
        </kw>
        <msg level="FAIL" timestamp="20240313 19:43:13.720">
         Element with locator 'xpath=//*[@class="title"]' not found.
        </msg>
        <status endtime="20240313 19:43:13.724" starttime="20240313 19:43:13.532" status="FAIL"/>
       </kw>
       <kw library="Support" name="Take Screenshot">
        <arg>
         Selenium
        </arg>
        <doc>
         Expects arguments as Selenium or Appium to control which type of
screenshot to take for the action
        </doc>
        <status endtime="20240313 19:43:13.724" starttime="20240313 19:43:13.724" status="NOT RUN"/>
       </kw>
       <status endtime="20240313 19:43:13.725" starttime="20240313 19:43:13.532" status="FAIL"/>
      </kw>
      <status endtime="20240313 19:43:13.725" starttime="20240313 19:43:13.532" status="FAIL"/>
     </kw>
     <kw library="Support_Sample" name="Then I can read the correct data is present">
      <status endtime="20240313 19:43:13.725" starttime="20240313 19:43:13.725" status="NOT RUN"/>
     </kw>
     <kw library="SeleniumLibrary" name="Close Browser" type="TEARDOWN">
      <doc>
       Closes the current browser.
      </doc>
      <status endtime="20240313 19:43:15.887" starttime="20240313 19:43:13.726" status="PASS"/>
     </kw>
     <doc>
      Test to check Visualization is working correctly
     </doc>
     <tag>
      AAAA-124
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <tag>
      selenium
     </tag>
     <tag>
      uat
     </tag>
     <tag>
      Web
     </tag>
     <status endtime="20240313 19:43:15.887" starttime="20240313 19:43:12.354" status="FAIL">
      Element with locator 'xpath=//*[@class="title"]' not found.
     </status>
    </test>
    <kw library="SeleniumLibrary" name="Close All Browsers" type="TEARDOWN">
     <doc>
      Closes all open browsers and resets the browser cache.
     </doc>
     <status endtime="20240313 19:43:15.887" starttime="20240313 19:43:15.887" status="PASS"/>
    </kw>
    <doc>
     This is a sample user story.
The documentation here should ideally match the user story doc.
It only works if you have Web libraries enabled and the chromedriver
is available in the environment PATH. Jira-ID: AAAA-124
    </doc>
    <status endtime="20240313 19:43:15.887" starttime="20240313 19:43:12.333" status="FAIL"/>
   </suite>
   <suite id="s1-s2-s3" name="AAAA-125 Calculator app tests" source="C:\SAP_Testing\SAPtesting\Tests\Sample\AAAA-125 Calculator app tests.robot">
    <kw library="Support_Sample" name="Navigate to calculator browser" type="SETUP">
     <kw library="Support_Sample" name="Open page to calculator in browser">
      <kw library="Support_Web" name="Add options to global browser options from list">
       <var>
        ${options}
       </var>
       <arg>
        --incognito
       </arg>
       <kw library="BuiltIn" name="Run Keyword And Return Status">
        <var>
         ${docker_check}
        </var>
        <arg>
         Variable Should Exist
        </arg>
        <arg>
         ${global_browser_options}
        </arg>
        <doc>
         Runs the given keyword with given arguments and returns the status as a Boolean value.
        </doc>
        <kw library="BuiltIn" name="Variable Should Exist">
         <arg>
          ${global_browser_options}
         </arg>
         <doc>
          Fails unless the given variable exists within the current scope.
         </doc>
         <status endtime="20240313 19:43:22.671" starttime="20240313 19:43:22.671" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240313 19:43:22.671">
         ${docker_check} = True
        </msg>
        <status endtime="20240313 19:43:22.671" starttime="20240313 19:43:22.671" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword If">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${docker_check}==False
        </arg>
        <arg>
         ${global_browser_options}=
        </arg>
        <arg>
         Create Chrome Options for download preferences
        </arg>
        <doc>
         Runs the given keyword with the given arguments, if ``condition`` is true.
        </doc>
        <msg level="INFO" timestamp="20240313 19:43:22.671">
         ${list_prefs} = None
        </msg>
        <status endtime="20240313 19:43:22.671" starttime="20240313 19:43:22.671" status="PASS"/>
       </kw>
       <for flavor="IN">
        <var>
         ${preference}
        </var>
        <value>
         @{additional_options}
        </value>
        <iter>
         <var name="${preference}">
          --incognito
         </var>
         <kw library="BuiltIn" name="Call Method">
          <arg>
           ${global_browser_options}
          </arg>
          <arg>
           add_argument
          </arg>
          <arg>
           ${preference}
          </arg>
          <doc>
           Calls the named method of the given object with the provided arguments.
          </doc>
          <status endtime="20240313 19:43:22.671" starttime="20240313 19:43:22.671" status="PASS"/>
         </kw>
         <status endtime="20240313 19:43:22.671" starttime="20240313 19:43:22.671" status="PASS"/>
        </iter>
        <status endtime="20240313 19:43:22.671" starttime="20240313 19:43:22.671" status="PASS"/>
       </for>
       <msg level="INFO" timestamp="20240313 19:43:22.671">
        ${options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002A838B0E780&gt;
       </msg>
       <status endtime="20240313 19:43:22.671" starttime="20240313 19:43:22.671" status="PASS"/>
      </kw>
      <kw library="SeleniumLibrary" name="Open Browser">
       <arg>
        ${wvar('calculator_url')}
       </arg>
       <arg>
        ${browser}
       </arg>
       <arg>
        options=${options}
       </arg>
       <doc>
        Opens a new browser instance to the optional ``url``.
       </doc>
       <msg level="WARN" timestamp="20240313 19:43:22.671">
        Failed to fetch value for field: Web.Dev.calculator_url
       </msg>
       <msg level="WARN" timestamp="20240313 19:43:22.671">
        Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'calculator_url'
       </msg>
       <msg level="INFO" timestamp="20240313 19:43:22.671">
        Opening browser 'chrome' to base url ''.
       </msg>
       <status endtime="20240313 19:43:24.306" starttime="20240313 19:43:22.671" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:24.306" starttime="20240313 19:43:22.671" status="PASS"/>
     </kw>
     <kw library="Support_Sample" name="Wait until the page has loaded successfully">
      <kw library="SeleniumLibrary" name="Wait Until Page Contains Element">
       <arg>
        ${wvar('page_loaded_check')}
       </arg>
       <doc>
        Waits until the element ``locator`` appears on the current page.
       </doc>
       <msg level="WARN" timestamp="20240313 19:43:24.308">
        Failed to fetch value for field: Web.Dev.page_loaded_check
       </msg>
       <msg level="WARN" timestamp="20240313 19:43:24.318">
        Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'page_loaded_check'
       </msg>
       <kw library="SeleniumLibrary" name="Capture Page Screenshot">
        <doc>
         Takes a screenshot of the current page and embeds it into a log file.
        </doc>
        <msg html="true" level="INFO" timestamp="20240313 19:43:29.480">
         &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="3-selenium-screenshot-1.png"&gt;&lt;img src="3-selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;
        </msg>
        <status endtime="20240313 19:43:29.480" starttime="20240313 19:43:29.406" status="PASS"/>
       </kw>
       <msg level="FAIL" timestamp="20240313 19:43:29.480">
        Element '' did not appear in 5 seconds.
       </msg>
       <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:24.306" status="FAIL"/>
      </kw>
      <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:24.306" status="FAIL"/>
     </kw>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:22.671" status="FAIL"/>
    </kw>
    <test id="s1-s2-s3-t1" line="10" name="Addition is tested successfully">
     <doc>
      Test to check Addition on calculator is working correctly
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      addition
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t2" line="17" name="Subtraction is tested successfully">
     <doc>
      Test to check if subraction of two number is successful
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <tag>
      subtraction
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t3" line="24" name="Multiplication is tested successfully">
     <doc>
      Test to check if multiplication of two number is successful
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      multiplication
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t4" line="31" name="Division is tested successfully">
     <doc>
      Test to check if division of two number is successful
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      division
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t5" line="38" name="Division by Zero">
     <doc>
      Test to check if division of a number by zero is possible
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      divide_by_zero
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t6" line="45" name="Multiplication of float numbers">
     <doc>
      Test to check if multiplication of two float numbers is successful
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      float_multiplication
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t7" line="52" name="Clear of state">
     <doc>
      Test to check if clear of state is possible
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      clear_state
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t8" line="59" name="Negation of number sign">
     <doc>
      Test to check if negation of number is possible
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      number_negation
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t9" line="66" name="Large number addition">
     <doc>
      Test to check addition of large number is successful
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      large_number_add
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <test id="s1-s2-s3-t10" line="73" name="Large number multiplication">
     <doc>
      Test to check multiplication of large number is successful
     </doc>
     <tag>
      AAAA-125
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      debug_listener_messages
     </tag>
     <tag>
      large_number_multiply
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:29.491" starttime="20240313 19:43:29.491" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <kw library="SeleniumLibrary" name="Close All Browsers" type="TEARDOWN">
     <doc>
      Closes all open browsers and resets the browser cache.
     </doc>
     <status endtime="20240313 19:43:33.709" starttime="20240313 19:43:29.491" status="PASS"/>
    </kw>
    <doc>
     Tests Calculator app functionality. Jira-ID: AAAA-125
    </doc>
    <status endtime="20240313 19:43:33.709" starttime="20240313 19:43:22.640" status="FAIL">
     Suite setup failed:
Element '' did not appear in 5 seconds.
    </status>
   </suite>
   <suite id="s1-s2-s4" name="AAAA-126 Template Calculator Test" source="C:\SAP_Testing\SAPtesting\Tests\Sample\AAAA-126 Template Calculator Test.robot">
    <kw library="Support_Sample" name="Navigate to calculator browser headless" type="SETUP">
     <kw library="Support_Sample" name="Set Chrome Options to open calculator headless">
      <kw library="SeleniumLibrary" name="Open Browser">
       <arg>
        ${wvar('calculator_url')}
       </arg>
       <arg>
        headlesschrome
       </arg>
       <arg>
        options=${global_browser_options}
       </arg>
       <doc>
        Opens a new browser instance to the optional ``url``.
       </doc>
       <msg level="WARN" timestamp="20240313 19:43:28.041">
        Failed to fetch value for field: Web.Dev.calculator_url
       </msg>
       <msg level="WARN" timestamp="20240313 19:43:28.041">
        Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'calculator_url'
       </msg>
       <msg level="INFO" timestamp="20240313 19:43:28.041">
        Opening browser 'headlesschrome' to base url ''.
       </msg>
       <status endtime="20240313 19:43:29.231" starttime="20240313 19:43:28.041" status="PASS"/>
      </kw>
      <kw library="SeleniumLibrary" name="Maximize Browser Window">
       <doc>
        Maximizes current browser window.
       </doc>
       <status endtime="20240313 19:43:29.352" starttime="20240313 19:43:29.231" status="PASS"/>
      </kw>
      <status endtime="20240313 19:43:29.352" starttime="20240313 19:43:28.041" status="PASS"/>
     </kw>
     <kw library="Support_Sample" name="Wait until the page has loaded successfully">
      <kw library="SeleniumLibrary" name="Wait Until Page Contains Element">
       <arg>
        ${wvar('page_loaded_check')}
       </arg>
       <doc>
        Waits until the element ``locator`` appears on the current page.
       </doc>
       <msg level="WARN" timestamp="20240313 19:43:29.352">
        Failed to fetch value for field: Web.Dev.page_loaded_check
       </msg>
       <msg level="WARN" timestamp="20240313 19:43:29.352">
        Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'page_loaded_check'
       </msg>
       <kw library="SeleniumLibrary" name="Capture Page Screenshot">
        <doc>
         Takes a screenshot of the current page and embeds it into a log file.
        </doc>
        <msg html="true" level="INFO" timestamp="20240313 19:43:34.584">
         &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="4-selenium-screenshot-1.png"&gt;&lt;img src="4-selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;
        </msg>
        <status endtime="20240313 19:43:34.584" starttime="20240313 19:43:34.540" status="PASS"/>
       </kw>
       <msg level="FAIL" timestamp="20240313 19:43:34.584">
        Element '' did not appear in 5 seconds.
       </msg>
       <status endtime="20240313 19:43:34.586" starttime="20240313 19:43:29.352" status="FAIL"/>
      </kw>
      <status endtime="20240313 19:43:34.586" starttime="20240313 19:43:29.352" status="FAIL"/>
     </kw>
     <status endtime="20240313 19:43:34.586" starttime="20240313 19:43:28.041" status="FAIL"/>
    </kw>
    <test id="s1-s2-s4-t1" line="10" name="Addition is tested successfully through template">
     <doc>
      Test to check Addition on calculator is working correctly through template
     </doc>
     <tag>
      AAAA-126
     </tag>
     <tag>
      addition_data_driven
     </tag>
     <tag>
      Calculator
     </tag>
     <tag>
      Regression
     </tag>
     <tag>
      Sample
     </tag>
     <status endtime="20240313 19:43:34.592" starttime="20240313 19:43:34.587" status="FAIL">
      Parent suite setup failed:
Element '' did not appear in 5 seconds.
     </status>
    </test>
    <kw library="SeleniumLibrary" name="Close All Browsers" type="TEARDOWN">
     <doc>
      Closes all open browsers and resets the browser cache.
     </doc>
     <status endtime="20240313 19:43:39.717" starttime="20240313 19:43:34.593" status="PASS"/>
    </kw>
    <doc>
     Tests Calculator app functionality in template. Jira-ID: AAAA-126
    </doc>
    <status endtime="20240313 19:43:39.717" starttime="20240313 19:43:28.026" status="FAIL">
     Suite setup failed:
Element '' did not appear in 5 seconds.
    </status>
   </suite>
   <suite id="s1-s2-s5" name="Datadriver" source="C:\SAP_Testing\SAPtesting\Tests\Sample\Datadriver">
    <suite id="s1-s2-s5-s1" name="Test" source="C:\SAP_Testing\SAPtesting\Tests\Sample\Datadriver\Test.robot">
     <test id="s1-s2-s5-s1-t1" line="12" name="Add two number with datadriver">
      <doc>
       Test Objective: To test multiple data set with single test case using datadriver.
      </doc>
      <tag>
       DatadriverTest
      </tag>
      <tag>
       Regression
      </tag>
      <tag>
       Sample
      </tag>
      <status endtime="20240313 19:43:39.415" starttime="20240313 19:43:39.415" status="FAIL">
       Test contains no keywords.
      </status>
     </test>
     <kw library="SeleniumLibrary" name="Close All Browsers" type="TEARDOWN">
      <doc>
       Closes all open browsers and resets the browser cache.
      </doc>
      <status endtime="20240313 19:43:39.431" starttime="20240313 19:43:39.431" status="PASS"/>
     </kw>
     <doc>
      Multiple data set run using DataDriver. Jira-ID: AGKL-659
     </doc>
     <status endtime="20240313 19:43:39.431" starttime="20240313 19:43:39.377" status="FAIL"/>
    </suite>
    <status endtime="20240313 19:43:39.717" starttime="20240313 19:43:39.377" status="FAIL"/>
   </suite>
   <doc>
    Sample Tests
   </doc>
   <status endtime="20240313 19:43:40.046" starttime="20240313 19:43:07.274" status="FAIL"/>
  </suite>
  <suite id="s1-s3" name="Test Addon" source="C:\SAP_Testing\SAPtesting\Tests\Test_Addon.robot">
   <kw library="Common_Function" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('EXE_PAD')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="WARN" timestamp="20240313 19:43:44.643">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:44.659">
      Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <msg level="INFO" timestamp="20240313 19:43:44.659">
      Starting process:
""
     </msg>
     <msg level="FAIL" timestamp="20240313 19:43:44.659">
      OSError: [WinError 87] The parameter is incorrect
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:44.659">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:44.659">
      Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.643" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Open Connection">
     <arg>
      ${symvar('Connection_Name')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('SAP_CLIENT')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('SAP_USER')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="OperatingSystem" name="Get Environment Variable">
     <var>
      ${SAP_PASSWORD}
     </var>
     <arg>
      SAP_PASSWORD
     </arg>
     <doc>
      Returns the value of an environment variable with the given name.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      ${SAP_PASSWORD}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      2
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.659" status="NOT RUN"/>
    </kw>
    <status endtime="20240313 19:43:44.659" starttime="20240313 19:43:44.643" status="FAIL"/>
   </kw>
   <test id="s1-s3-t1" line="11" name="Check_Saint Transation Code">
    <tag>
     RBTLOGIN
    </tag>
    <tag>
     Regression
    </tag>
    <status endtime="20240313 19:43:44.675" starttime="20240313 19:43:44.659" status="FAIL">
     Parent suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also parent suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
    </status>
   </test>
   <kw library="Common_Function" name="System Logout" type="TEARDOWN">
    <kw library="CustomSapGuiLibrary" name="Run Transaction">
     <arg>
      /nex
     </arg>
     <doc>
      Runs a Sap transaction. An error is given when an unknown transaction is specified.
     </doc>
     <msg level="FAIL" timestamp="20240313 19:43:44.675">
      AttributeError: 'int' object has no attribute 'findById'
     </msg>
     <status endtime="20240313 19:43:44.675" starttime="20240313 19:43:44.675" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:49.675">
      Slept 5 seconds
     </msg>
     <status endtime="20240313 19:43:49.675" starttime="20240313 19:43:44.675" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:49.675" starttime="20240313 19:43:44.675" status="FAIL">
     AttributeError: 'int' object has no attribute 'findById'
    </status>
   </kw>
   <status endtime="20240313 19:43:49.675" starttime="20240313 19:43:44.605" status="FAIL">
    Suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
   </status>
  </suite>
  <suite id="s1-s4" name="Test spam Update" source="C:\SAP_Testing\SAPtesting\Tests\Test_spam_Update.robot">
   <kw library="Common_Function" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('EXE_PAD')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="WARN" timestamp="20240313 19:43:44.804">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:44.804">
      Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <msg level="INFO" timestamp="20240313 19:43:44.804">
      Starting process:
""
     </msg>
     <msg level="FAIL" timestamp="20240313 19:43:44.804">
      OSError: [WinError 87] The parameter is incorrect
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:44.804">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:44.804">
      Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <status endtime="20240313 19:43:44.804" starttime="20240313 19:43:44.794" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Open Connection">
     <arg>
      ${symvar('Connection_Name')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('SAP_CLIENT')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('SAP_USER')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="OperatingSystem" name="Get Environment Variable">
     <var>
      ${SAP_PASSWORD}
     </var>
     <arg>
      SAP_PASSWORD
     </arg>
     <doc>
      Returns the value of an environment variable with the given name.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      ${SAP_PASSWORD}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      2
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.815" status="NOT RUN"/>
    </kw>
    <status endtime="20240313 19:43:44.815" starttime="20240313 19:43:44.794" status="FAIL"/>
   </kw>
   <test id="s1-s4-t1" line="10" name="Check_Spam_update">
    <tag>
     Regression
    </tag>
    <tag>
     spamupdate
    </tag>
    <status endtime="20240313 19:43:44.825" starttime="20240313 19:43:44.815" status="FAIL">
     Parent suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also parent suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
    </status>
   </test>
   <kw library="Common_Function" name="System Logout" type="TEARDOWN">
    <kw library="CustomSapGuiLibrary" name="Run Transaction">
     <arg>
      /nex
     </arg>
     <doc>
      Runs a Sap transaction. An error is given when an unknown transaction is specified.
     </doc>
     <msg level="FAIL" timestamp="20240313 19:43:44.825">
      AttributeError: 'int' object has no attribute 'findById'
     </msg>
     <status endtime="20240313 19:43:44.825" starttime="20240313 19:43:44.825" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:49.825">
      Slept 5 seconds
     </msg>
     <status endtime="20240313 19:43:49.825" starttime="20240313 19:43:44.825" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:49.825" starttime="20240313 19:43:44.825" status="FAIL">
     AttributeError: 'int' object has no attribute 'findById'
    </status>
   </kw>
   <status endtime="20240313 19:43:49.825" starttime="20240313 19:43:44.784" status="FAIL">
    Suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
   </status>
  </suite>
  <suite id="s1-s5" name="Test spam patch" source="C:\SAP_Testing\SAPtesting\Tests\Test_spam_patch.robot">
   <kw library="Common_Function" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('EXE_PAD')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="WARN" timestamp="20240313 19:43:54.863">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:54.863">
      Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <msg level="INFO" timestamp="20240313 19:43:54.863">
      Starting process:
""
     </msg>
     <msg level="FAIL" timestamp="20240313 19:43:54.863">
      OSError: [WinError 87] The parameter is incorrect
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:54.863">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:54.863">
      Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.848" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Open Connection">
     <arg>
      ${symvar('Connection_Name')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('SAP_CLIENT')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('SAP_USER')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="OperatingSystem" name="Get Environment Variable">
     <var>
      ${SAP_PASSWORD}
     </var>
     <arg>
      SAP_PASSWORD
     </arg>
     <doc>
      Returns the value of an environment variable with the given name.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      ${SAP_PASSWORD}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      2
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="NOT RUN"/>
    </kw>
    <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.848" status="FAIL"/>
   </kw>
   <test id="s1-s5-t1" line="9" name="Check_Spam_update">
    <tag>
     Regression
    </tag>
    <tag>
     spampatch
    </tag>
    <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="FAIL">
     Parent suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also parent suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
    </status>
   </test>
   <test id="s1-s5-t2" line="18" name="Import Queue">
    <tag>
     Regression
    </tag>
    <tag>
     spampatch
    </tag>
    <status endtime="20240313 19:43:54.863" starttime="20240313 19:43:54.863" status="FAIL">
     Parent suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also parent suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
    </status>
   </test>
   <kw library="Common_Function" name="System Logout" type="TEARDOWN">
    <kw library="CustomSapGuiLibrary" name="Run Transaction">
     <arg>
      /nex
     </arg>
     <doc>
      Runs a Sap transaction. An error is given when an unknown transaction is specified.
     </doc>
     <msg level="FAIL" timestamp="20240313 19:43:54.863">
      AttributeError: 'int' object has no attribute 'findById'
     </msg>
     <status endtime="20240313 19:43:54.879" starttime="20240313 19:43:54.863" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240313 19:43:59.880">
      Slept 5 seconds
     </msg>
     <status endtime="20240313 19:43:59.880" starttime="20240313 19:43:54.879" status="PASS"/>
    </kw>
    <status endtime="20240313 19:43:59.880" starttime="20240313 19:43:54.863" status="FAIL">
     AttributeError: 'int' object has no attribute 'findById'
    </status>
   </kw>
   <status endtime="20240313 19:43:59.880" starttime="20240313 19:43:54.832" status="FAIL">
    Suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
   </status>
  </suite>
  <suite id="s1-s6" name="Test spam patch enhance" source="C:\SAP_Testing\SAPtesting\Tests\Test_spam_patch_enhance.robot">
   <kw library="Common_Function" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('EXE_PAD')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="WARN" timestamp="20240313 19:43:56.069">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:56.069">
      Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <msg level="INFO" timestamp="20240313 19:43:56.069">
      Starting process:
""
     </msg>
     <msg level="FAIL" timestamp="20240313 19:43:56.069">
      OSError: [WinError 87] The parameter is incorrect
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:56.069">
      Failed to fetch value for field: Sym.Dev.EXE_PAD
     </msg>
     <msg level="WARN" timestamp="20240313 19:43:56.069">
      Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
     </msg>
     <status endtime="20240313 19:43:56.069" starttime="20240313 19:43:56.069" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Open Connection">
     <arg>
      ${symvar('Connection_Name')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('SAP_CLIENT')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('SAP_USER')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="OperatingSystem" name="Get Environment Variable">
     <var>
      ${SAP_PASSWORD}
     </var>
     <arg>
      SAP_PASSWORD
     </arg>
     <doc>
      Returns the value of an environment variable with the given name.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      ${SAP_PASSWORD}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      2
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="NOT RUN"/>
    </kw>
    <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.069" status="FAIL"/>
   </kw>
   <test id="s1-s6-t1" line="12" name="Check_Spam_update">
    <tag>
     Regression
    </tag>
    <tag>
     spampatchenhance
    </tag>
    <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="FAIL">
     Parent suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also parent suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
    </status>
   </test>
   <test id="s1-s6-t2" line="20" name="Import Queue">
    <tag>
     Regression
    </tag>
    <tag>
     spampatchenhance
    </tag>
    <status endtime="20240313 19:43:56.079" starttime="20240313 19:43:56.079" status="FAIL">
     Parent suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also parent suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
    </status>
   </test>
   <kw library="Common_Function" name="System Logout" type="TEARDOWN">
    <kw library="CustomSapGuiLibrary" name="Run Transaction">
     <arg>
      /nex
     </arg>
     <doc>
      Runs a Sap transaction. An error is given when an unknown transaction is specified.
     </doc>
     <msg level="FAIL" timestamp="20240313 19:43:56.079">
      AttributeError: 'int' object has no attribute 'findById'
     </msg>
     <status endtime="20240313 19:43:56.091" starttime="20240313 19:43:56.079" status="FAIL"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240313 19:44:01.091">
      Slept 5 seconds
     </msg>
     <status endtime="20240313 19:44:01.091" starttime="20240313 19:43:56.091" status="PASS"/>
    </kw>
    <status endtime="20240313 19:44:01.091" starttime="20240313 19:43:56.079" status="FAIL">
     AttributeError: 'int' object has no attribute 'findById'
    </status>
   </kw>
   <status endtime="20240313 19:44:01.091" starttime="20240313 19:43:56.049" status="FAIL">
    Suite setup failed:
OSError: [WinError 87] The parameter is incorrect

Also suite teardown failed:
AttributeError: 'int' object has no attribute 'findById'
   </status>
  </suite>
  <doc>
   Testing functionality through Robot Framework
  </doc>
  <meta name="environment">
   Dev
  </meta>
  <meta name="test_browser_name">
   chrome
  </meta>
  <meta name="test_browser_version">
   122.0.6261.128
  </meta>
  <meta name="test_driver_version">
   121.0.6167.85
  </meta>
  <meta name="test_environment">
   Dev
  </meta>
  <meta name="test_freeze_dependencies">
   astroid==3.1.0,attrs==23.2.0,beautifulsoup4==4.12.3,bs4==0.0.2,certifi==2024.2.2,cffi==1.16.0,chardet==5.2.0,charset-normalizer==3.3.2,click==8.1.7,colorama==0.4.6,cryptography==42.0.5,defusedxml==0.7.1,dill==0.3.8,docutils==0.20.1,exceptiongroup==1.2.0,gitdb==4.0.11,GitPython==3.1.42,h11==0.14.0,idna==3.6,isort==5.13.2,Jinja2==3.1.3,jira==3.6.0,jsonpath-ng==1.6.1,jsonschema==4.21.1,jsonschema-specifications==2023.12.1,lazy-object-proxy==1.10.0,lxml==5.1.0,markdown-it-py==3.0.0,MarkupSafe==2.1.5,mccabe==0.7.0,mdurl==0.1.2,natsort==8.4.0,oauthlib==3.2.2,outcome==1.3.0.post0,packaging==24.0,pathspec==0.11.2,pillow==10.2.0,pip==24.0,platformdirs==4.2.0,ply==3.11,pycparser==2.21,Pygments==2.17.2,pylint==3.1.0,PySocks==1.7.1,pywin32==306,PyYAML==6.0.1,referencing==0.33.0,requests==2.31.0,requests-oauthlib==1.4.0,requests-toolbelt==1.0.0,rich==13.7.1,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.18.0,selenium==4.9.1,setuptools==69.2.0,smmap==5.0.1,sniffio==1.3.1,sortedcontainers==2.4.0,soupsieve==2.5,tomli==2.0.1,tomlkit==0.12.4,trio==0.24.0,trio-websocket==0.11.1,typing_extensions==4.10.0,urllib3==2.2.1,wheel==0.43.0,wrapt==1.16.0,wsproto==1.2.0
  </meta>
  <status endtime="20240313 19:44:01.364" starttime="20240313 19:43:02.989" status="FAIL"/>
 </suite>
 <statistics>
  <total>
   <stat fail="20" pass="1" skip="0">
    All Tests
   </stat>
  </total>
  <tag>
   <stat fail="0" pass="1" skip="0">
    AAAA-123
   </stat>
   <stat fail="1" pass="0" skip="0">
    AAAA-124
   </stat>
   <stat fail="10" pass="0" skip="0">
    AAAA-125
   </stat>
   <stat fail="1" pass="0" skip="0">
    AAAA-126
   </stat>
   <stat fail="1" pass="0" skip="0">
    addition
   </stat>
   <stat fail="1" pass="0" skip="0">
    addition_data_driven
   </stat>
   <stat fail="11" pass="0" skip="0">
    Calculator
   </stat>
   <stat fail="1" pass="0" skip="0">
    clear_state
   </stat>
   <stat fail="1" pass="0" skip="0">
    DatadriverTest
   </stat>
   <stat fail="10" pass="1" skip="0">
    debug_listener_messages
   </stat>
   <stat fail="1" pass="0" skip="0">
    divide_by_zero
   </stat>
   <stat fail="1" pass="0" skip="0">
    division
   </stat>
   <stat fail="1" pass="0" skip="0">
    float_multiplication
   </stat>
   <stat fail="0" pass="1" skip="0">
    helloworld
   </stat>
   <stat fail="1" pass="0" skip="0">
    large_number_add
   </stat>
   <stat fail="1" pass="0" skip="0">
    large_number_multiply
   </stat>
   <stat fail="1" pass="0" skip="0">
    migration
   </stat>
   <stat fail="1" pass="0" skip="0">
    multiplication
   </stat>
   <stat fail="1" pass="0" skip="0">
    number_negation
   </stat>
   <stat fail="1" pass="0" skip="0">
    RBTLOGIN
   </stat>
   <stat fail="20" pass="1" skip="0">
    Regression
   </stat>
   <stat fail="13" pass="1" skip="0">
    Sample
   </stat>
   <stat fail="0" pass="1" skip="0">
    SampleTest
   </stat>
   <stat fail="1" pass="0" skip="0">
    selenium
   </stat>
   <stat fail="2" pass="0" skip="0">
    spampatch
   </stat>
   <stat fail="2" pass="0" skip="0">
    spampatchenhance
   </stat>
   <stat fail="1" pass="0" skip="0">
    spamupdate
   </stat>
   <stat fail="1" pass="0" skip="0">
    subtraction
   </stat>
   <stat fail="1" pass="0" skip="0">
    uat
   </stat>
   <stat fail="1" pass="0" skip="0">
    Web
   </stat>
  </tag>
  <suite>
   <stat fail="20" id="s1" name="Tests" pass="1" skip="0">
    Tests
   </stat>
   <stat fail="1" id="s1-s1" name="Test Migration tcodes" pass="0" skip="0">
    Tests.Test Migration tcodes
   </stat>
   <stat fail="13" id="s1-s2" name="Sample" pass="1" skip="0">
    Tests.Sample
   </stat>
   <stat fail="0" id="s1-s2-s1" name="AAAA-123 Hello World User Story" pass="1" skip="0">
    Tests.Sample.AAAA-123 Hello World User Story
   </stat>
   <stat fail="1" id="s1-s2-s2" name="AAAA-124 User Story to test selenium navigation" pass="0" skip="0">
    Tests.Sample.AAAA-124 User Story to test selenium navigation
   </stat>
   <stat fail="10" id="s1-s2-s3" name="AAAA-125 Calculator app tests" pass="0" skip="0">
    Tests.Sample.AAAA-125 Calculator app tests
   </stat>
   <stat fail="1" id="s1-s2-s4" name="AAAA-126 Template Calculator Test" pass="0" skip="0">
    Tests.Sample.AAAA-126 Template Calculator Test
   </stat>
   <stat fail="1" id="s1-s2-s5" name="Datadriver" pass="0" skip="0">
    Tests.Sample.Datadriver
   </stat>
   <stat fail="1" id="s1-s2-s5-s1" name="Test" pass="0" skip="0">
    Tests.Sample.Datadriver.Test
   </stat>
   <stat fail="1" id="s1-s3" name="Test Addon" pass="0" skip="0">
    Tests.Test Addon
   </stat>
   <stat fail="1" id="s1-s4" name="Test spam Update" pass="0" skip="0">
    Tests.Test spam Update
   </stat>
   <stat fail="2" id="s1-s5" name="Test spam patch" pass="0" skip="0">
    Tests.Test spam patch
   </stat>
   <stat fail="2" id="s1-s6" name="Test spam patch enhance" pass="0" skip="0">
    Tests.Test spam patch enhance
   </stat>
  </suite>
 </statistics>
 <errors>
  <msg level="WARN" timestamp="20240313 19:43:07.475">
   Failed to fetch value for field: Sym.Dev.SAP_SERVER
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:07.490">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'SAP_SERVER'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:07.522">
   Failed to fetch value for field: Sym.Dev.SAP_SERVER
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:07.522">
   Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'SAP_SERVER'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:12.354">
   Failed to fetch value for field: Web.Dev.robot_site
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:12.364">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'robot_site'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:13.517">
   Failed to fetch value for field: Web.Dev.robot_site
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:13.525">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'robot_site'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:22.671">
   Failed to fetch value for field: Web.Dev.calculator_url
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:22.671">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'calculator_url'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:24.308">
   Failed to fetch value for field: Web.Dev.page_loaded_check
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:24.318">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'page_loaded_check'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:28.041">
   Failed to fetch value for field: Web.Dev.calculator_url
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:28.041">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'calculator_url'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:29.352">
   Failed to fetch value for field: Web.Dev.page_loaded_check
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:29.352">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Web.Dev' has no attribute 'page_loaded_check'
  </msg>
  <msg level="ERROR" timestamp="20240313 19:43:39.400">
   [ DataDriver ] Error in robot file:
  File "C:\SAP_Testing\SAPtesting\Tests\Sample\Datadriver\Test.robot", line 0
  </msg>
  <msg level="ERROR" timestamp="20240313 19:43:39.400">
   In source file:
  File "C:\SAP_Testing\SAPtesting\Tests\Sample\Datadriver//TextExcel.xlsx", line 0
  </msg>
  <msg level="ERROR" timestamp="20240313 19:43:39.415">
   Calling method '_start_suite' of listener 'DataDriver' failed: ImportError: Requirements (pandas, openpyxl) for XLSX support are not installed.
    Use 'pip install -U robotframework-datadriver[XLS]' to install XLSX support.
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.643">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.659">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.659">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.659">
   Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.804">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.804">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.804">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:44.804">
   Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:54.863">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:54.863">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:54.863">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:54.863">
   Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:56.069">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:56.069">
   Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:56.069">
   Failed to fetch value for field: Sym.Dev.EXE_PAD
  </msg>
  <msg level="WARN" timestamp="20240313 19:43:56.069">
   Traceback (most recent call last):
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "C:\Program Files\Python312\Lib\subprocess.py", line 1538, in _execute_child
    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OSError: [WinError 87] The parameter is incorrect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Execution\Access_Data.py", line 58, in get_data
    field_value = eval(command)
                  ^^^^^^^^^^^^^
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: module 'Data.Symphony.Dev' has no attribute 'EXE_PAD'
  </msg>
 </errors>
</robot>
