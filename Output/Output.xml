<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.0.2 (Python 3.12.1 on win32)" generated="20240503 14:02:43.772" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="C:\SAP_Testing\SAPtesting\Tests">
<kw name="Setup highest level suite" type="SETUP">
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:56:32.967" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:56:32.967" level="INFO">${screenshotCount} = 0_1</msg>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:32.967" level="INFO">${screenshotCount} = 0_1</msg>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:56:32.967" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:56:32.967" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:32.967" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<msg timestamp="20240503 13:56:32.967" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:32.967"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<msg timestamp="20240503 13:56:38.178" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:56:38.178" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<msg timestamp="20240503 13:56:38.178" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:56:38.178" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<msg timestamp="20240503 13:56:38.178" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<msg timestamp="20240503 13:56:38.178" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002121DC219A0&gt;</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<msg timestamp="20240503 13:56:38.178" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002121DC219A0&gt;</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</for>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002121DC219A0&gt;</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:38.178"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:38.178"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.178" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:56:38.178"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:56:32.983" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:56:32.983" endtime="20240503 13:56:32.983"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:56:32.983" level="INFO">${screenshotCount} = 1_1</msg>
<status status="PASS" starttime="20240503 13:56:32.983" endtime="20240503 13:56:32.983"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:32.983" level="INFO">${screenshotCount} = 1_1</msg>
<status status="PASS" starttime="20240503 13:56:32.983" endtime="20240503 13:56:32.983"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:56:32.983" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:56:32.998" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\1\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\1\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:56:32.983" endtime="20240503 13:56:32.998"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.983" endtime="20240503 13:56:32.998"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.983" endtime="20240503 13:56:32.998"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:32.998" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:32.998"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:32.998"/>
</kw>
<msg timestamp="20240503 13:56:32.998" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:32.998"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<msg timestamp="20240503 13:56:38.271" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:56:38.271" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<msg timestamp="20240503 13:56:38.271" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:56:38.271" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<msg timestamp="20240503 13:56:38.271" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<msg timestamp="20240503 13:56:38.271" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:56:38.271" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001DE463AD310&gt;</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<msg timestamp="20240503 13:56:38.271" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001DE463AD310&gt;</msg>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.271"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:56:38.286" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:56:38.286" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</for>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.286"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:56:38.286" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001DE463AD310&gt;</msg>
<status status="PASS" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.271" endtime="20240503 13:56:38.286"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:38.286"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:38.286"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.998" endtime="20240503 13:56:38.286"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:56:38.286" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:56:38.286" endtime="20240503 13:56:38.286"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:57:14.228" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:57:14.228" endtime="20240503 13:57:14.228"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:57:14.228" level="INFO">${screenshotCount} = 2_1</msg>
<status status="PASS" starttime="20240503 13:57:14.228" endtime="20240503 13:57:14.228"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:14.228" level="INFO">${screenshotCount} = 2_1</msg>
<status status="PASS" starttime="20240503 13:57:14.228" endtime="20240503 13:57:14.228"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:57:14.228" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:57:14.242" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\2\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\2\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:57:14.228" endtime="20240503 13:57:14.242"/>
</kw>
<status status="PASS" starttime="20240503 13:57:14.228" endtime="20240503 13:57:14.242"/>
</kw>
<status status="PASS" starttime="20240503 13:57:14.228" endtime="20240503 13:57:14.242"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:14.242" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:14.242"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:14.242"/>
</kw>
<msg timestamp="20240503 13:57:14.242" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:14.242"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<msg timestamp="20240503 13:57:17.846" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:57:17.846" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<msg timestamp="20240503 13:57:17.846" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:57:17.846" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<msg timestamp="20240503 13:57:17.846" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<msg timestamp="20240503 13:57:17.846" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000015B4BD3A0C0&gt;</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<msg timestamp="20240503 13:57:17.846" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000015B4BD3A0C0&gt;</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:57:17.846" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.846"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:57:17.861" endtime="20240503 13:57:17.861"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:57:17.861" endtime="20240503 13:57:17.861"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.861"/>
</for>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.861"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:57:17.861" endtime="20240503 13:57:17.861"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:17.861" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000015B4BD3A0C0&gt;</msg>
<status status="PASS" starttime="20240503 13:57:17.861" endtime="20240503 13:57:17.861"/>
</kw>
<status status="PASS" starttime="20240503 13:57:17.846" endtime="20240503 13:57:17.861"/>
</kw>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:17.861"/>
</kw>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:17.861"/>
</kw>
<status status="PASS" starttime="20240503 13:57:14.242" endtime="20240503 13:57:17.861"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:17.861" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:57:17.861" endtime="20240503 13:57:17.861"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:57:15.256" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:57:15.256" level="INFO">${screenshotCount} = 3_1</msg>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:15.256" level="INFO">${screenshotCount} = 3_1</msg>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:57:15.256" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:57:15.256" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\3\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\3\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:15.256" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<msg timestamp="20240503 13:57:15.256" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:15.256"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:57:19.928" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:19.928" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:19.928" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:19.928" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:19.928" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:57:19.928" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:57:19.928" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<msg timestamp="20240503 13:57:19.928" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.928"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:57:19.938" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.938"/>
</kw>
<msg timestamp="20240503 13:57:19.938" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:57:19.938" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:57:19.938" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<msg timestamp="20240503 13:57:19.938" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<msg timestamp="20240503 13:57:19.938" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:57:19.938" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002310241E0F0&gt;</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<msg timestamp="20240503 13:57:19.938" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002310241E0F0&gt;</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:57:19.938" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:57:19.938" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</for>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:19.938" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002310241E0F0&gt;</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<status status="PASS" starttime="20240503 13:57:19.928" endtime="20240503 13:57:19.938"/>
</kw>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:19.938"/>
</kw>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:19.938"/>
</kw>
<status status="PASS" starttime="20240503 13:57:15.256" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:19.938" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:19.938"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:57:52.943" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:57:52.943" endtime="20240503 13:57:52.943"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:57:52.953" level="INFO">${screenshotCount} = 4_1</msg>
<status status="PASS" starttime="20240503 13:57:52.943" endtime="20240503 13:57:52.953"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:52.953" level="INFO">${screenshotCount} = 4_1</msg>
<status status="PASS" starttime="20240503 13:57:52.953" endtime="20240503 13:57:52.953"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:57:52.953" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:57:52.955" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\4\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\4\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:57:52.953" endtime="20240503 13:57:52.955"/>
</kw>
<status status="PASS" starttime="20240503 13:57:52.953" endtime="20240503 13:57:52.955"/>
</kw>
<status status="PASS" starttime="20240503 13:57:52.943" endtime="20240503 13:57:52.955"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:52.955" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:52.955"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:52.955"/>
</kw>
<msg timestamp="20240503 13:57:52.955" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:52.955"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<msg timestamp="20240503 13:57:57.414" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:57:57.414" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<msg timestamp="20240503 13:57:57.414" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:57:57.414" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<msg timestamp="20240503 13:57:57.414" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<msg timestamp="20240503 13:57:57.414" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:57:57.414" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001FD2DA0DC40&gt;</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.414"/>
</kw>
<msg timestamp="20240503 13:57:57.430" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001FD2DA0DC40&gt;</msg>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.430"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:57:57.430" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:57:57.430" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</for>
<status status="PASS" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:57:57.430" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001FD2DA0DC40&gt;</msg>
<status status="PASS" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</kw>
<status status="PASS" starttime="20240503 13:57:57.414" endtime="20240503 13:57:57.430"/>
</kw>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:57.430"/>
</kw>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:57.430"/>
</kw>
<status status="PASS" starttime="20240503 13:57:52.955" endtime="20240503 13:57:57.430"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:57:57.430" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:57:57.430" endtime="20240503 13:57:57.430"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:58:00.473" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.473"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:58:00.473" level="INFO">${screenshotCount} = 5_1</msg>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.473"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:00.473" level="INFO">${screenshotCount} = 5_1</msg>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.473"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:58:00.473" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:58:00.473" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\5\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\5\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.473"/>
</kw>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.473"/>
</kw>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.473"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:00.473" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.473"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.484"/>
</kw>
<msg timestamp="20240503 13:58:00.484" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:00.484"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:58:00.484" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<status status="PASS" starttime="20240503 13:58:00.484" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<msg timestamp="20240503 13:58:04.943" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:58:04.943" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<msg timestamp="20240503 13:58:04.943" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:58:04.943" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<msg timestamp="20240503 13:58:04.943" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<msg timestamp="20240503 13:58:04.943" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:58:04.943" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001EEE90A7590&gt;</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<msg timestamp="20240503 13:58:04.943" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001EEE90A7590&gt;</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.943"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:58:04.959" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.959"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:58:04.959" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:58:04.959" endtime="20240503 13:58:04.959"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:58:04.959" endtime="20240503 13:58:04.959"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:58:04.959" endtime="20240503 13:58:04.959"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:58:04.959" endtime="20240503 13:58:04.959"/>
</for>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.959"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:58:04.959" endtime="20240503 13:58:04.959"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:04.959" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001EEE90A7590&gt;</msg>
<status status="PASS" starttime="20240503 13:58:04.959" endtime="20240503 13:58:04.959"/>
</kw>
<status status="PASS" starttime="20240503 13:58:04.943" endtime="20240503 13:58:04.959"/>
</kw>
<status status="PASS" starttime="20240503 13:58:00.484" endtime="20240503 13:58:04.959"/>
</kw>
<status status="PASS" starttime="20240503 13:58:00.484" endtime="20240503 13:58:04.959"/>
</kw>
<status status="PASS" starttime="20240503 13:58:00.473" endtime="20240503 13:58:04.959"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:04.959" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:58:04.959" endtime="20240503 13:58:04.959"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:58:43.476" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:58:43.476" endtime="20240503 13:58:43.476"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:58:43.476" level="INFO">${screenshotCount} = 6_1</msg>
<status status="PASS" starttime="20240503 13:58:43.476" endtime="20240503 13:58:43.476"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:43.476" level="INFO">${screenshotCount} = 6_1</msg>
<status status="PASS" starttime="20240503 13:58:43.476" endtime="20240503 13:58:43.476"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:58:43.476" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:58:43.486" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\6\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\6\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:58:43.476" endtime="20240503 13:58:43.486"/>
</kw>
<status status="PASS" starttime="20240503 13:58:43.476" endtime="20240503 13:58:43.486"/>
</kw>
<status status="PASS" starttime="20240503 13:58:43.476" endtime="20240503 13:58:43.486"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:43.486" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:43.486"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:43.486"/>
</kw>
<msg timestamp="20240503 13:58:43.486" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:43.486"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<msg timestamp="20240503 13:58:46.809" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:58:46.809" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<msg timestamp="20240503 13:58:46.809" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:58:46.809" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<msg timestamp="20240503 13:58:46.809" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<msg timestamp="20240503 13:58:46.809" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:58:46.809" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000161A202D340&gt;</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<msg timestamp="20240503 13:58:46.809" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000161A202D340&gt;</msg>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.809"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:58:46.824" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:58:46.824" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</for>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.824"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:46.824" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000161A202D340&gt;</msg>
<status status="PASS" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</kw>
<status status="PASS" starttime="20240503 13:58:46.809" endtime="20240503 13:58:46.824"/>
</kw>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:46.824"/>
</kw>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:46.824"/>
</kw>
<status status="PASS" starttime="20240503 13:58:43.486" endtime="20240503 13:58:46.824"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:58:46.824" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:58:46.824" endtime="20240503 13:58:46.824"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:58:56.087" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:58:56.087" endtime="20240503 13:58:56.087"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:58:56.087" level="INFO">${screenshotCount} = 7_1</msg>
<status status="PASS" starttime="20240503 13:58:56.087" endtime="20240503 13:58:56.087"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:56.087" level="INFO">${screenshotCount} = 7_1</msg>
<status status="PASS" starttime="20240503 13:58:56.087" endtime="20240503 13:58:56.087"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:58:56.087" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:58:56.098" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\7\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\7\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:58:56.087" endtime="20240503 13:58:56.098"/>
</kw>
<status status="PASS" starttime="20240503 13:58:56.087" endtime="20240503 13:58:56.098"/>
</kw>
<status status="PASS" starttime="20240503 13:58:56.087" endtime="20240503 13:58:56.098"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:58:56.098" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:58:56.098"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:58:56.098"/>
</kw>
<msg timestamp="20240503 13:58:56.098" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:58:56.098"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:59:00.359" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:59:00.359"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:00.359" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:59:00.359" endtime="20240503 13:59:00.359"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:00.359" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:59:00.359" endtime="20240503 13:59:00.359"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:00.359" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:59:00.359" endtime="20240503 13:59:00.359"/>
</kw>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:59:00.359"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:00.359" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:59:00.359" endtime="20240503 13:59:00.359"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:59:00.359" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:59:00.359" endtime="20240503 13:59:00.359"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:59:00.366" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<msg timestamp="20240503 13:59:00.366" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<status status="PASS" starttime="20240503 13:59:00.359" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:59:00.366" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<msg timestamp="20240503 13:59:00.366" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:59:00.366" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:59:00.366" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<msg timestamp="20240503 13:59:00.366" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<msg timestamp="20240503 13:59:00.366" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:59:00.366" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002849C18E090&gt;</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<msg timestamp="20240503 13:59:00.366" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002849C18E090&gt;</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:59:00.366" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:59:00.366" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</for>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:00.366" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002849C18E090&gt;</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:59:00.366"/>
</kw>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:59:00.366"/>
</kw>
<status status="PASS" starttime="20240503 13:58:56.098" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:00.366" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:00.366"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:59:24.916" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:59:24.916" endtime="20240503 13:59:24.916"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:59:24.916" level="INFO">${screenshotCount} = 8_1</msg>
<status status="PASS" starttime="20240503 13:59:24.916" endtime="20240503 13:59:24.916"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:24.932" level="INFO">${screenshotCount} = 8_1</msg>
<status status="PASS" starttime="20240503 13:59:24.916" endtime="20240503 13:59:24.932"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:59:24.932" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:59:24.934" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\8\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\8\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:59:24.932" endtime="20240503 13:59:24.934"/>
</kw>
<status status="PASS" starttime="20240503 13:59:24.932" endtime="20240503 13:59:24.934"/>
</kw>
<status status="PASS" starttime="20240503 13:59:24.916" endtime="20240503 13:59:24.934"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:24.934" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:24.934"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:24.934"/>
</kw>
<msg timestamp="20240503 13:59:24.934" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:24.934"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:59:28.292" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:28.292" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:28.292" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:28.292" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:28.292" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:59:28.292" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:59:28.292" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<msg timestamp="20240503 13:59:28.292" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.292"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:59:28.301" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<msg timestamp="20240503 13:59:28.301" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:59:28.301" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:59:28.301" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<msg timestamp="20240503 13:59:28.301" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<msg timestamp="20240503 13:59:28.301" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:59:28.301" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000278DC95E000&gt;</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<msg timestamp="20240503 13:59:28.301" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000278DC95E000&gt;</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:59:28.301" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:59:28.301" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</for>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:28.301" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000278DC95E000&gt;</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<status status="PASS" starttime="20240503 13:59:28.292" endtime="20240503 13:59:28.301"/>
</kw>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:28.301"/>
</kw>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:28.301"/>
</kw>
<status status="PASS" starttime="20240503 13:59:24.934" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:28.301" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 13:59:28.301"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:59:31.314" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 13:59:31.314" endtime="20240503 13:59:31.314"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 13:59:31.314" level="INFO">${screenshotCount} = 9_1</msg>
<status status="PASS" starttime="20240503 13:59:31.314" endtime="20240503 13:59:31.314"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:31.314" level="INFO">${screenshotCount} = 9_1</msg>
<status status="PASS" starttime="20240503 13:59:31.314" endtime="20240503 13:59:31.314"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 13:59:31.314" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 13:59:31.324" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\9\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\9\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 13:59:31.314" endtime="20240503 13:59:31.324"/>
</kw>
<status status="PASS" starttime="20240503 13:59:31.314" endtime="20240503 13:59:31.324"/>
</kw>
<status status="PASS" starttime="20240503 13:59:31.314" endtime="20240503 13:59:31.324"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:31.324" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:31.324"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:31.324"/>
</kw>
<msg timestamp="20240503 13:59:31.324" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:31.324"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 13:59:34.548" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:34.548" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:34.548" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:34.548" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:34.548" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 13:59:34.548" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:59:34.548" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<msg timestamp="20240503 13:59:34.548" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.548"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 13:59:34.558" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.558"/>
</kw>
<msg timestamp="20240503 13:59:34.558" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 13:59:34.558" level="INFO">Length is 1</msg>
<msg timestamp="20240503 13:59:34.558" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<msg timestamp="20240503 13:59:34.558" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<msg timestamp="20240503 13:59:34.558" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 13:59:34.558" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000019CE9829CA0&gt;</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<msg timestamp="20240503 13:59:34.558" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000019CE9829CA0&gt;</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 13:59:34.558" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 13:59:34.558" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<status status="NOT RUN" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</iter>
<status status="NOT RUN" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</for>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 13:59:34.558" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000019CE9829CA0&gt;</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<status status="PASS" starttime="20240503 13:59:34.548" endtime="20240503 13:59:34.558"/>
</kw>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:34.558"/>
</kw>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:34.558"/>
</kw>
<status status="PASS" starttime="20240503 13:59:31.324" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 13:59:34.558" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 13:59:34.558" endtime="20240503 13:59:34.558"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:00:09.733" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:09.733"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:00:09.733" level="INFO">${screenshotCount} = 10_1</msg>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:09.733"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:09.733" level="INFO">${screenshotCount} = 10_1</msg>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:09.733"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 14:00:09.733" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 14:00:09.733" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\10\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\10\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:09.733"/>
</kw>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:09.733"/>
</kw>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:09.733"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:09.733" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:09.733"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 14:00:09.744" endtime="20240503 14:00:09.744"/>
</kw>
<msg timestamp="20240503 14:00:09.744" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 14:00:09.744" endtime="20240503 14:00:09.744"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 14:00:14.010" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 14:00:09.744" endtime="20240503 14:00:14.010"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:14.010" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 14:00:14.010" endtime="20240503 14:00:14.010"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:14.010" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 14:00:14.010" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<status status="PASS" starttime="20240503 14:00:09.744" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<msg timestamp="20240503 14:00:14.013" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 14:00:14.013" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<msg timestamp="20240503 14:00:14.013" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">Length is 1</msg>
<msg timestamp="20240503 14:00:14.013" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<msg timestamp="20240503 14:00:14.013" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<msg timestamp="20240503 14:00:14.013" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001BF290C9880&gt;</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<msg timestamp="20240503 14:00:14.013" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001BF290C9880&gt;</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 14:00:14.013" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<status status="NOT RUN" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</iter>
<status status="NOT RUN" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</for>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.013"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.028"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:14.028" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000001BF290C9880&gt;</msg>
<status status="PASS" starttime="20240503 14:00:14.028" endtime="20240503 14:00:14.028"/>
</kw>
<status status="PASS" starttime="20240503 14:00:14.013" endtime="20240503 14:00:14.028"/>
</kw>
<status status="PASS" starttime="20240503 14:00:09.744" endtime="20240503 14:00:14.028"/>
</kw>
<status status="PASS" starttime="20240503 14:00:09.744" endtime="20240503 14:00:14.028"/>
</kw>
<status status="PASS" starttime="20240503 14:00:09.733" endtime="20240503 14:00:14.028"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:14.028" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 14:00:14.028" endtime="20240503 14:00:14.028"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:00:15.964" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 14:00:15.964" endtime="20240503 14:00:15.964"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:00:15.964" level="INFO">${screenshotCount} = 11_1</msg>
<status status="PASS" starttime="20240503 14:00:15.964" endtime="20240503 14:00:15.964"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:15.964" level="INFO">${screenshotCount} = 11_1</msg>
<status status="PASS" starttime="20240503 14:00:15.964" endtime="20240503 14:00:15.964"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 14:00:15.964" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 14:00:15.964" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\11\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\11\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 14:00:15.964" endtime="20240503 14:00:15.974"/>
</kw>
<status status="PASS" starttime="20240503 14:00:15.964" endtime="20240503 14:00:15.974"/>
</kw>
<status status="PASS" starttime="20240503 14:00:15.964" endtime="20240503 14:00:15.974"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:15.974" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:15.974"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:15.974"/>
</kw>
<msg timestamp="20240503 14:00:15.974" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:15.974"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 14:00:19.556" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:19.556"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:19.556" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 14:00:19.556" endtime="20240503 14:00:19.556"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:19.556" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 14:00:19.556" endtime="20240503 14:00:19.556"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:19.556" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 14:00:19.556" endtime="20240503 14:00:19.556"/>
</kw>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:19.556"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:19.556" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 14:00:19.556" endtime="20240503 14:00:19.556"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 14:00:19.562" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.562"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 14:00:19.562" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.562"/>
</kw>
<msg timestamp="20240503 14:00:19.562" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.562"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.562"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.562"/>
</kw>
<status status="PASS" starttime="20240503 14:00:19.556" endtime="20240503 14:00:19.562"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 14:00:19.567" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.567"/>
</kw>
<msg timestamp="20240503 14:00:19.567" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 14:00:19.567" level="INFO">Length is 1</msg>
<msg timestamp="20240503 14:00:19.567" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<msg timestamp="20240503 14:00:19.567" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<msg timestamp="20240503 14:00:19.567" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 14:00:19.567" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002B1147AD2E0&gt;</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<msg timestamp="20240503 14:00:19.567" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002B1147AD2E0&gt;</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 14:00:19.567" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 14:00:19.567" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<status status="NOT RUN" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</iter>
<status status="NOT RUN" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</for>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:00:19.567" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002B1147AD2E0&gt;</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<status status="PASS" starttime="20240503 14:00:19.562" endtime="20240503 14:00:19.567"/>
</kw>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:19.567"/>
</kw>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:19.567"/>
</kw>
<status status="PASS" starttime="20240503 14:00:15.974" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:00:19.567" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:00:19.567"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:01:03.986" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 14:01:03.986" endtime="20240503 14:01:03.986"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:01:03.986" level="INFO">${screenshotCount} = 12_1</msg>
<status status="PASS" starttime="20240503 14:01:03.986" endtime="20240503 14:01:03.986"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:03.986" level="INFO">${screenshotCount} = 12_1</msg>
<status status="PASS" starttime="20240503 14:01:03.986" endtime="20240503 14:01:03.986"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 14:01:03.986" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 14:01:03.996" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\12\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\12\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 14:01:03.986" endtime="20240503 14:01:03.996"/>
</kw>
<status status="PASS" starttime="20240503 14:01:03.986" endtime="20240503 14:01:03.996"/>
</kw>
<status status="PASS" starttime="20240503 14:01:03.986" endtime="20240503 14:01:03.996"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:03.996" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:03.996"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:03.996"/>
</kw>
<msg timestamp="20240503 14:01:03.996" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:03.996"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<msg timestamp="20240503 14:01:08.416" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 14:01:08.416" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<msg timestamp="20240503 14:01:08.416" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">Length is 1</msg>
<msg timestamp="20240503 14:01:08.416" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<msg timestamp="20240503 14:01:08.416" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<msg timestamp="20240503 14:01:08.416" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 14:01:08.416" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000208AAE22330&gt;</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<msg timestamp="20240503 14:01:08.416" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000208AAE22330&gt;</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.416"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 14:01:08.432" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.432"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 14:01:08.432" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:01:08.432" endtime="20240503 14:01:08.432"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 14:01:08.432" endtime="20240503 14:01:08.432"/>
</kw>
<status status="NOT RUN" starttime="20240503 14:01:08.432" endtime="20240503 14:01:08.432"/>
</iter>
<status status="NOT RUN" starttime="20240503 14:01:08.432" endtime="20240503 14:01:08.432"/>
</for>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.432"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 14:01:08.432" endtime="20240503 14:01:08.432"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:08.432" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000208AAE22330&gt;</msg>
<status status="PASS" starttime="20240503 14:01:08.432" endtime="20240503 14:01:08.432"/>
</kw>
<status status="PASS" starttime="20240503 14:01:08.416" endtime="20240503 14:01:08.432"/>
</kw>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:08.432"/>
</kw>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:08.432"/>
</kw>
<status status="PASS" starttime="20240503 14:01:03.996" endtime="20240503 14:01:08.432"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:08.432" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 14:01:08.432" endtime="20240503 14:01:08.432"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:01:37.741" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 14:01:37.741" endtime="20240503 14:01:37.741"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:01:37.741" level="INFO">${screenshotCount} = 13_1</msg>
<status status="PASS" starttime="20240503 14:01:37.741" endtime="20240503 14:01:37.741"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:37.741" level="INFO">${screenshotCount} = 13_1</msg>
<status status="PASS" starttime="20240503 14:01:37.741" endtime="20240503 14:01:37.741"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 14:01:37.741" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 14:01:37.752" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\13\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\13\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 14:01:37.741" endtime="20240503 14:01:37.752"/>
</kw>
<status status="PASS" starttime="20240503 14:01:37.741" endtime="20240503 14:01:37.752"/>
</kw>
<status status="PASS" starttime="20240503 14:01:37.741" endtime="20240503 14:01:37.752"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:37.752" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:37.752"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:37.752"/>
</kw>
<msg timestamp="20240503 14:01:37.752" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:37.752"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<msg timestamp="20240503 14:01:42.525" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 14:01:42.525" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<msg timestamp="20240503 14:01:42.525" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">Length is 1</msg>
<msg timestamp="20240503 14:01:42.525" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<msg timestamp="20240503 14:01:42.525" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<msg timestamp="20240503 14:01:42.525" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 14:01:42.525" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000029BEA21E000&gt;</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<msg timestamp="20240503 14:01:42.525" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000029BEA21E000&gt;</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.525"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 14:01:42.541" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.541"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 14:01:42.541" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:01:42.541" endtime="20240503 14:01:42.541"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 14:01:42.541" endtime="20240503 14:01:42.541"/>
</kw>
<status status="NOT RUN" starttime="20240503 14:01:42.541" endtime="20240503 14:01:42.541"/>
</iter>
<status status="NOT RUN" starttime="20240503 14:01:42.541" endtime="20240503 14:01:42.541"/>
</for>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.541"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 14:01:42.541" endtime="20240503 14:01:42.541"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:42.541" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000029BEA21E000&gt;</msg>
<status status="PASS" starttime="20240503 14:01:42.541" endtime="20240503 14:01:42.541"/>
</kw>
<status status="PASS" starttime="20240503 14:01:42.525" endtime="20240503 14:01:42.541"/>
</kw>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:42.541"/>
</kw>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:42.541"/>
</kw>
<status status="PASS" starttime="20240503 14:01:37.752" endtime="20240503 14:01:42.541"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:01:42.541" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 14:01:42.541" endtime="20240503 14:01:42.541"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:01:58.057" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240503 14:01:58.057" endtime="20240503 14:01:58.057"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240503 14:01:58.059" level="INFO">${screenshotCount} = 14_1</msg>
<status status="PASS" starttime="20240503 14:01:58.057" endtime="20240503 14:01:58.059"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:58.059" level="INFO">${screenshotCount} = 14_1</msg>
<status status="PASS" starttime="20240503 14:01:58.059" endtime="20240503 14:01:58.059"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240503 14:01:58.059" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240503 14:01:58.062" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\14\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\14\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240503 14:01:58.059" endtime="20240503 14:01:58.062"/>
</kw>
<status status="PASS" starttime="20240503 14:01:58.059" endtime="20240503 14:01:58.062"/>
</kw>
<status status="PASS" starttime="20240503 14:01:58.057" endtime="20240503 14:01:58.062"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:01:58.062" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:01:58.062"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:01:58.062"/>
</kw>
<msg timestamp="20240503 14:01:58.062" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:01:58.062"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">&amp;{browser_information} = { browser_version=124.0.6367.119 | driver_version=124.0.6367.91  }</msg>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">Set suite metadata 'test_browser_version' to value '124.0.6367.119'.</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">Set suite metadata 'test_driver_version' to value '124.0.6367.91 '.</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<msg timestamp="20240503 14:02:01.643" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240503 14:02:01.643" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<msg timestamp="20240503 14:02:01.643" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">Length is 1</msg>
<msg timestamp="20240503 14:02:01.643" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<msg timestamp="20240503 14:02:01.643" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<msg timestamp="20240503 14:02:01.643" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240503 14:02:01.643" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002012F02E210&gt;</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<msg timestamp="20240503 14:02:01.643" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002012F02E210&gt;</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.643"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240503 14:02:01.658" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.658"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240503 14:02:01.658" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240503 14:02:01.658" endtime="20240503 14:02:01.658"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240503 14:02:01.658" endtime="20240503 14:02:01.658"/>
</kw>
<status status="NOT RUN" starttime="20240503 14:02:01.658" endtime="20240503 14:02:01.658"/>
</iter>
<status status="NOT RUN" starttime="20240503 14:02:01.658" endtime="20240503 14:02:01.658"/>
</for>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.658"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240503 14:02:01.658" endtime="20240503 14:02:01.658"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240503 14:02:01.658" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002012F02E210&gt;</msg>
<status status="PASS" starttime="20240503 14:02:01.658" endtime="20240503 14:02:01.658"/>
</kw>
<status status="PASS" starttime="20240503 14:02:01.643" endtime="20240503 14:02:01.658"/>
</kw>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:02:01.658"/>
</kw>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:02:01.658"/>
</kw>
<status status="PASS" starttime="20240503 14:01:58.062" endtime="20240503 14:02:01.658"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240503 14:02:01.658" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240503 14:02:01.658" endtime="20240503 14:02:01.658"/>
</kw>
<status status="PASS" starttime="20240503 13:56:32.967" endtime="20240503 13:56:38.178"/>
</kw>
<suite id="s1-s1" name="Test AL11" source="C:\SAP_Testing\SAPtesting\Tests\Test_AL11.robot">
<kw name="System Logon" library="AL11" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:56:38.194" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:56:38.194" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:56:38.194" endtime="20240503 13:56:38.194"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:48.194" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:56:38.194" endtime="20240503 13:56:48.194"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:56:48.194" endtime="20240503 13:56:48.194"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:56:48.203" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:56:48.194" endtime="20240503 13:56:49.230"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:56:49.230" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:56:49.246" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:56:49.230" endtime="20240503 13:56:49.246"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:56:49.246" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:56:49.277" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:56:49.246" endtime="20240503 13:56:49.277"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:56:49.277" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:56:49.277" endtime="20240503 13:56:49.277"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:56:49.277" endtime="20240503 13:56:50.112"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:50.112" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:50.128" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:50.112" endtime="20240503 13:56:50.128"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 13:56:50.128" endtime="20240503 13:56:50.134"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:51.150" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:56:50.150" endtime="20240503 13:56:51.150"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:51.150" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:51.150" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:51.150" endtime="20240503 13:56:51.150"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.194" endtime="20240503 13:56:51.150"/>
</kw>
<test id="s1-s1-t1" name="Executing AL11" line="9">
<kw name="Transaction AL11" library="AL11">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nal11</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:56:51.150" endtime="20240503 13:56:52.404"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:56:52.404" endtime="20240503 13:56:52.874"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>025_al11.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:52.874" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:52.874" level="INFO" html="true">&lt;a href="025_al11.jpg"&gt;&lt;img src="025_al11.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:52.874" endtime="20240503 13:56:52.874"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:54.874" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 13:56:52.874" endtime="20240503 13:56:54.874"/>
</kw>
<kw name="Table Scroll" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cntlEXT_COM/shellcont/shell</arg>
<arg>23</arg>
<status status="PASS" starttime="20240503 13:56:54.874" endtime="20240503 13:56:54.935"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:56.935" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 13:56:54.935" endtime="20240503 13:56:56.935"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>026_al11.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:56.935" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:56.935" level="INFO" html="true">&lt;a href="026_al11.jpg"&gt;&lt;img src="026_al11.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:56.935" endtime="20240503 13:56:56.935"/>
</kw>
<status status="PASS" starttime="20240503 13:56:51.150" endtime="20240503 13:56:56.935"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:56:51.150" endtime="20240503 13:56:56.935"/>
</test>
<kw name="System Logout" library="AL11" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:56:56.941" endtime="20240503 13:56:57.167"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:02.168" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:56:57.167" endtime="20240503 13:57:02.168"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:02.168" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:02.174" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:02.168" endtime="20240503 13:57:02.174"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:12.174" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:57:02.174" endtime="20240503 13:57:12.174"/>
</kw>
<status status="PASS" starttime="20240503 13:56:56.941" endtime="20240503 13:57:12.174"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.178" endtime="20240503 13:57:12.174"/>
</suite>
<suite id="s1-s2" name="Test OAC0" source="C:\SAP_Testing\SAPtesting\Tests\Test_OAC0.robot">
<kw name="System Logon" library="OAC0" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:56:38.308" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:56:38.308" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:56:38.308" endtime="20240503 13:56:38.314"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:48.314" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:56:38.314" endtime="20240503 13:56:48.314"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:56:48.314" endtime="20240503 13:56:48.408"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:56:48.408" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:56:48.408" endtime="20240503 13:56:49.394"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:56:49.394" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:56:49.431" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:56:49.394" endtime="20240503 13:56:49.431"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:56:49.431" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:56:49.447" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:56:49.431" endtime="20240503 13:56:49.447"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:56:49.447" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:56:49.447" endtime="20240503 13:56:49.447"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:56:49.447" endtime="20240503 13:56:49.764"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:49.795" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:49.795" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:49.764" endtime="20240503 13:56:49.795"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<msg timestamp="20240503 13:56:50.448" level="INFO">Multiple logon exists</msg>
<status status="PASS" starttime="20240503 13:56:49.795" endtime="20240503 13:56:50.448"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:51.449" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:56:50.448" endtime="20240503 13:56:51.449"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:51.449" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:51.449" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:51.449" endtime="20240503 13:56:51.449"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.308" endtime="20240503 13:56:51.449"/>
</kw>
<test id="s1-s2-t1" name="Executing OACO" line="9">
<kw name="Transaction OACO" library="OAC0">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nOAC0</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:56:51.449" endtime="20240503 13:56:51.945"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:52.945" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:56:51.945" endtime="20240503 13:56:52.945"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:52.945" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:52.945" level="INFO" html="true">&lt;a href="sap-screenshot_1.jpg"&gt;&lt;img src="sap-screenshot_1.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:52.945" endtime="20240503 13:56:52.945"/>
</kw>
<kw name="Scroll" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tblSAPLSCMS_CREPC_SREP</arg>
<arg>35</arg>
<doc>Scrolls the scrollbar of an element 'element_id' that is contained within a shell object.
'Position' is the number of rows to scroll.</doc>
<status status="PASS" starttime="20240503 13:56:52.945" endtime="20240503 13:56:53.179"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:54.179" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:56:53.179" endtime="20240503 13:56:54.179"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>054_OACO.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:54.179" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:54.179" level="INFO" html="true">&lt;a href="054_OACO.jpg"&gt;&lt;img src="054_OACO.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:54.179" endtime="20240503 13:56:54.179"/>
</kw>
<kw name="Scroll" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tblSAPLSCMS_CREPC_SREP</arg>
<arg>70</arg>
<doc>Scrolls the scrollbar of an element 'element_id' that is contained within a shell object.
'Position' is the number of rows to scroll.</doc>
<status status="PASS" starttime="20240503 13:56:54.179" endtime="20240503 13:56:54.403"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:55.403" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:56:54.403" endtime="20240503 13:56:55.403"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>055_OACO.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:55.406" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:55.406" level="INFO" html="true">&lt;a href="055_OACO.jpg"&gt;&lt;img src="055_OACO.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:55.403" endtime="20240503 13:56:55.406"/>
</kw>
<kw name="Scroll" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tblSAPLSCMS_CREPC_SREP</arg>
<arg>105</arg>
<doc>Scrolls the scrollbar of an element 'element_id' that is contained within a shell object.
'Position' is the number of rows to scroll.</doc>
<status status="PASS" starttime="20240503 13:56:55.406" endtime="20240503 13:56:55.640"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:56.641" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:56:55.640" endtime="20240503 13:56:56.641"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>056_OACO.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:56.641" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:56.641" level="INFO" html="true">&lt;a href="056_OACO.jpg"&gt;&lt;img src="056_OACO.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:56.641" endtime="20240503 13:56:56.641"/>
</kw>
<kw name="Scroll" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tblSAPLSCMS_CREPC_SREP</arg>
<arg>140</arg>
<doc>Scrolls the scrollbar of an element 'element_id' that is contained within a shell object.
'Position' is the number of rows to scroll.</doc>
<status status="PASS" starttime="20240503 13:56:56.641" endtime="20240503 13:56:56.870"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:56:57.871" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:56:56.870" endtime="20240503 13:56:57.871"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>057_OACO.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:56:57.871" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:57.871" level="INFO" html="true">&lt;a href="057_OACO.jpg"&gt;&lt;img src="057_OACO.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:56:57.871" endtime="20240503 13:56:57.871"/>
</kw>
<status status="PASS" starttime="20240503 13:56:51.449" endtime="20240503 13:56:57.871"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:56:51.449" endtime="20240503 13:56:57.871"/>
</test>
<kw name="System Logout" library="OAC0" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:56:57.875" endtime="20240503 13:56:58.155"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:03.155" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:56:58.155" endtime="20240503 13:57:03.155"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:03.155" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:03.159" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:03.155" endtime="20240503 13:57:03.159"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:13.162" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:57:03.159" endtime="20240503 13:57:13.162"/>
</kw>
<status status="PASS" starttime="20240503 13:56:57.875" endtime="20240503 13:57:13.162"/>
</kw>
<status status="PASS" starttime="20240503 13:56:38.286" endtime="20240503 13:57:13.162"/>
</suite>
<suite id="s1-s3" name="Test SCOT" source="C:\SAP_Testing\SAPtesting\Tests\Test_SCOT.robot">
<kw name="System Logon" library="SCOT" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:57:17.877" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:57:17.877" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:57:17.877" endtime="20240503 13:57:17.877"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:27.878" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:57:17.877" endtime="20240503 13:57:27.878"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:57:27.878" endtime="20240503 13:57:27.885"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:57:27.885" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:57:27.885" endtime="20240503 13:57:28.589"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:57:28.589" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:57:28.691" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:57:28.589" endtime="20240503 13:57:28.691"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:57:28.691" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:57:28.701" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:57:28.691" endtime="20240503 13:57:28.701"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:57:28.701" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:57:28.701" endtime="20240503 13:57:28.701"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:57:28.701" endtime="20240503 13:57:29.436"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:29.447" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:29.447" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:29.436" endtime="20240503 13:57:29.447"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 13:57:29.447" endtime="20240503 13:57:29.457"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:30.458" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:29.457" endtime="20240503 13:57:30.458"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:30.458" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:30.458" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:30.458" endtime="20240503 13:57:30.458"/>
</kw>
<status status="PASS" starttime="20240503 13:57:17.877" endtime="20240503 13:57:30.458"/>
</kw>
<test id="s1-s3-t1" name="Executing SCOT" line="9">
<kw name="Transaction SCOT" library="SCOT">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nscot</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:57:30.458" endtime="20240503 13:57:31.969"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:57:31.969" endtime="20240503 13:57:32.239"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>017_scot.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:32.239" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:32.239" level="INFO" html="true">&lt;a href="017_scot.jpg"&gt;&lt;img src="017_scot.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:32.239" endtime="20240503 13:57:32.239"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:33.240" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:32.239" endtime="20240503 13:57:33.240"/>
</kw>
<status status="PASS" starttime="20240503 13:57:30.458" endtime="20240503 13:57:33.240"/>
</kw>
<kw name="SMTP Nodes" library="SCOT">
<kw name="Click Toolbar Button" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/subCONTENT:SAPLSBCS_ADM:0104/subSUB_CONTENT:SAPLSBCS_NODES:0100/cntlSMTP_NODES_TOOLBAR_CONTAINER/shellcont/shell</arg>
<arg>EXPA</arg>
<doc>Clicks a button of a toolbar within a GridView 'table_id' which is contained within a shell object.
Use the Scripting tracker recorder to find the 'button_id' of the button to click</doc>
<msg timestamp="20240503 13:57:33.248" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:33.248" level="INFO" html="true">&lt;a href="sap-screenshot_1.jpg"&gt;&lt;img src="sap-screenshot_1.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:33.240" endtime="20240503 13:57:34.180"/>
</kw>
<kw name="Doubleclick Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/subCONTENT:SAPLSBCS_ADM:0104/subSUB_CONTENT:SAPLSBCS_NODES:0100/cntlSMTP_NODES_COLUMN_TREE_CONT/shellcont/shell</arg>
<arg>SMTP</arg>
<arg>Node</arg>
<doc>Performs a double-click on a given element. Used only for shell objects.</doc>
<status status="PASS" starttime="20240503 13:57:34.180" endtime="20240503 13:57:34.599"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:35.600" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:34.599" endtime="20240503 13:57:35.600"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>018_SMTP.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:35.600" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:35.605" level="INFO" html="true">&lt;a href="018_SMTP.jpg"&gt;&lt;img src="018_SMTP.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:35.600" endtime="20240503 13:57:35.605"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:57:35.605" endtime="20240503 13:57:35.891"/>
</kw>
<kw name="Doubleclick Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/subCONTENT:SAPLSBCS_ADM:0104/subSUB_CONTENT:SAPLSBCS_NODES:0100/cntlSMTP_NODES_COLUMN_TREE_CONT/shellcont/shell</arg>
<arg>SMTP&amp;-&amp;INT</arg>
<arg>Node</arg>
<doc>Performs a double-click on a given element. Used only for shell objects.</doc>
<status status="PASS" starttime="20240503 13:57:35.891" endtime="20240503 13:57:36.207"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:37.207" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:36.207" endtime="20240503 13:57:37.207"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>019_SMTP&amp;INT.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:37.207" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:37.207" level="INFO" html="true">&lt;a href="019_SMTP%26INT.jpg"&gt;&lt;img src="019_SMTP%26INT.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:37.207" endtime="20240503 13:57:37.207"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:57:37.207" endtime="20240503 13:57:37.502"/>
</kw>
<status status="PASS" starttime="20240503 13:57:33.240" endtime="20240503 13:57:37.502"/>
</kw>
<kw name="Settings Nodes" library="SCOT">
<kw name="Scot Tree" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell/shellcont[1]/shell</arg>
<status status="PASS" starttime="20240503 13:57:37.502" endtime="20240503 13:57:38.035"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:39.036" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:38.035" endtime="20240503 13:57:39.036"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>020_OutboundSettings.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:39.036" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:39.036" level="INFO" html="true">&lt;a href="020_OutboundSettings.jpg"&gt;&lt;img src="020_OutboundSettings.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:39.036" endtime="20240503 13:57:39.036"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/subCONTENT:SAPLSBCS_ADM:0104/subSUB_CONTENT:SAPLSBCS_SETTINGS:0200/tabsGV_CNT_TABSTR_OUT/tabpSTATUS</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:57:39.036" endtime="20240503 13:57:39.278"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:40.279" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:39.278" endtime="20240503 13:57:40.279"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>021_Statusrequest.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:40.279" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:40.279" level="INFO" html="true">&lt;a href="021_Statusrequest.jpg"&gt;&lt;img src="021_Statusrequest.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:40.279" endtime="20240503 13:57:40.279"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/subCONTENT:SAPLSBCS_ADM:0104/subSUB_CONTENT:SAPLSBCS_SETTINGS:0200/tabsGV_CNT_TABSTR_OUT/tabpA_OUT</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:57:40.279" endtime="20240503 13:57:40.531"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:41.532" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:40.531" endtime="20240503 13:57:41.532"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>022_Anlys.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:41.534" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:41.534" level="INFO" html="true">&lt;a href="022_Anlys.jpg"&gt;&lt;img src="022_Anlys.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:41.532" endtime="20240503 13:57:41.534"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/subCONTENT:SAPLSBCS_ADM:0104/subSUB_CONTENT:SAPLSBCS_SETTINGS:0200/tabsGV_CNT_TABSTR_OUT/tabpSIGN_ENCRYPT</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:57:41.534" endtime="20240503 13:57:41.783"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:42.783" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:41.783" endtime="20240503 13:57:42.783"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>023_sig&amp;encry.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:42.783" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:42.783" level="INFO" html="true">&lt;a href="023_sig%26encry.jpg"&gt;&lt;img src="023_sig%26encry.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:42.783" endtime="20240503 13:57:42.787"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:43.787" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:42.787" endtime="20240503 13:57:43.787"/>
</kw>
<status status="PASS" starttime="20240503 13:57:37.502" endtime="20240503 13:57:43.787"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:57:30.458" endtime="20240503 13:57:43.787"/>
</test>
<kw name="System Logout" library="SCOT" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:57:43.787" endtime="20240503 13:57:44.109"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:49.110" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:57:44.109" endtime="20240503 13:57:49.110"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:49.113" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:49.114" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:49.110" endtime="20240503 13:57:49.114"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:59.114" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:57:49.114" endtime="20240503 13:57:59.114"/>
</kw>
<status status="PASS" starttime="20240503 13:57:43.787" endtime="20240503 13:57:59.114"/>
</kw>
<status status="PASS" starttime="20240503 13:57:17.861" endtime="20240503 13:57:59.114"/>
</suite>
<suite id="s1-s4" name="Test SHMM" source="C:\SAP_Testing\SAPtesting\Tests\Test_SHMM.robot">
<kw name="System Logon" library="SHMM" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:57:19.959" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:57:19.959" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:57:19.959" endtime="20240503 13:57:19.969"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:29.969" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:57:19.969" endtime="20240503 13:57:29.969"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:57:29.969" endtime="20240503 13:57:29.974"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:57:29.974" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:57:29.974" endtime="20240503 13:57:31.938"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:57:31.938" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:57:31.954" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:57:31.938" endtime="20240503 13:57:31.954"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:57:31.954" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:57:31.969" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:57:31.954" endtime="20240503 13:57:31.969"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:57:31.969" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:57:31.969" endtime="20240503 13:57:31.969"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:57:31.969" endtime="20240503 13:57:32.411"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:32.411" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:32.411" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:32.411" endtime="20240503 13:57:32.411"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<msg timestamp="20240503 13:57:33.043" level="INFO">Multiple logon exists</msg>
<status status="PASS" starttime="20240503 13:57:32.411" endtime="20240503 13:57:33.043"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:34.043" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:33.043" endtime="20240503 13:57:34.043"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:34.043" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:34.043" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:34.043" endtime="20240503 13:57:34.043"/>
</kw>
<status status="PASS" starttime="20240503 13:57:19.959" endtime="20240503 13:57:34.043"/>
</kw>
<test id="s1-s4-t1" name="Executing SHMM" line="10">
<kw name="Transaction SHMM" library="SHMM">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nshmm</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:57:34.043" endtime="20240503 13:57:34.770"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:57:34.770" endtime="20240503 13:57:35.019"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>027_shmm.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:35.029" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:35.029" level="INFO" html="true">&lt;a href="027_shmm.jpg"&gt;&lt;img src="027_shmm.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:35.019" endtime="20240503 13:57:35.029"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:36.029" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:57:35.029" endtime="20240503 13:57:36.029"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsTAB_0100/tabpTAB_0100_TUNE</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:57:36.029" endtime="20240503 13:57:36.287"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>028_shmm_shared_Memory.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:36.287" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:36.287" level="INFO" html="true">&lt;a href="028_shmm_shared_Memory.jpg"&gt;&lt;img src="028_shmm_shared_Memory.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:36.287" endtime="20240503 13:57:36.287"/>
</kw>
<status status="PASS" starttime="20240503 13:57:34.043" endtime="20240503 13:57:36.287"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:57:34.043" endtime="20240503 13:57:36.287"/>
</test>
<kw name="System Logout" library="SHMM" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:57:36.297" endtime="20240503 13:57:36.618"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:41.619" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:57:36.618" endtime="20240503 13:57:41.619"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:57:41.619" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:41.619" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:57:41.619" endtime="20240503 13:57:41.619"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:57:51.619" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:57:41.619" endtime="20240503 13:57:51.619"/>
</kw>
<status status="PASS" starttime="20240503 13:57:36.297" endtime="20240503 13:57:51.619"/>
</kw>
<status status="PASS" starttime="20240503 13:57:19.938" endtime="20240503 13:57:51.619"/>
</suite>
<suite id="s1-s5" name="Test SLDAPICUST" source="C:\SAP_Testing\SAPtesting\Tests\Test_SLDAPICUST.robot">
<kw name="System Logon" library="SLDAPICUST" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:57:57.446" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:57:57.446" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:57:57.446" endtime="20240503 13:57:57.446"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:07.446" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:57:57.446" endtime="20240503 13:58:07.446"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:58:07.446" endtime="20240503 13:58:07.449"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:58:07.449" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:58:07.449" endtime="20240503 13:58:08.253"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:58:08.262" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:58:08.272" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:58:08.253" endtime="20240503 13:58:08.273"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:58:08.274" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:58:08.291" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:58:08.273" endtime="20240503 13:58:08.292"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:58:08.298" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:58:08.292" endtime="20240503 13:58:08.298"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:58:08.299" endtime="20240503 13:58:09.005"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:09.016" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:09.016" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:09.005" endtime="20240503 13:58:09.016"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 13:58:09.016" endtime="20240503 13:58:09.026"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:10.026" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:09.026" endtime="20240503 13:58:10.026"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:10.026" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:10.026" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:10.026" endtime="20240503 13:58:10.026"/>
</kw>
<status status="PASS" starttime="20240503 13:57:57.446" endtime="20240503 13:58:10.026"/>
</kw>
<test id="s1-s5-t1" name="Executing SLDAPICUST" line="9">
<kw name="Transaction SLDAPICUST" library="SLDAPICUST">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nSldapicust</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:58:10.026" endtime="20240503 13:58:11.227"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:12.227" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:11.227" endtime="20240503 13:58:12.227"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>070_Sldapicust.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:12.231" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:12.231" level="INFO" html="true">&lt;a href="070_Sldapicust.jpg"&gt;&lt;img src="070_Sldapicust.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:12.227" endtime="20240503 13:58:12.231"/>
</kw>
<status status="PASS" starttime="20240503 13:58:10.026" endtime="20240503 13:58:12.231"/>
</kw>
<kw name="Sldapicust display" library="SLDAPICUST">
<kw name="Get Cell Value From Gridtable" library="SAP_Tcode_Library">
<var>${destination}</var>
<arg>wnd[0]/usr/cntlCONTAINER/shellcont/shell</arg>
<msg timestamp="20240503 13:58:12.231" level="INFO">1 4
0
SLD_BCSCLNTPO</msg>
<msg timestamp="20240503 13:58:12.231" level="INFO">${destination} = SLD_BCSCLNTPO</msg>
<status status="PASS" starttime="20240503 13:58:12.231" endtime="20240503 13:58:12.231"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${destination}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240503 13:58:12.231" level="INFO">SLD_BCSCLNTPO</msg>
<status status="PASS" starttime="20240503 13:58:12.231" endtime="20240503 13:58:12.231"/>
</kw>
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nsm59</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:58:12.231" endtime="20240503 13:58:12.883"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[1]/menu[5]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:58:12.883" endtime="20240503 13:58:13.394"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[1]/usr/tabsG_SELONETABSTRIP/tabpTAB001/ssubSUBSCR_PRESEL:SAPLSDH4:0220/sub:SAPLSDH4:0220/txtG_SELFLD_TAB-LOW[0,24]</arg>
<arg>SLD_BCSCLNTPO</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:58:13.435" level="INFO">Typing text 'SLD_BCSCLNTPO' into text field 'wnd[1]/usr/tabsG_SELONETABSTRIP/tabpTAB001/ssubSUBSCR_PRESEL:SAPLSDH4:0220/sub:SAPLSDH4:0220/txtG_SELFLD_TAB-LOW[0,24]'.</msg>
<status status="PASS" starttime="20240503 13:58:13.394" endtime="20240503 13:58:13.435"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:18.435" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:58:13.435" endtime="20240503 13:58:18.435"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:58:18.435" endtime="20240503 13:58:18.766"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:23.766" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:58:18.766" endtime="20240503 13:58:23.766"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:58:23.766" endtime="20240503 13:58:24.088"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:29.089" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:58:24.088" endtime="20240503 13:58:29.089"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>071_display.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:29.090" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:29.090" level="INFO" html="true">&lt;a href="071_display.jpg"&gt;&lt;img src="071_display.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:29.089" endtime="20240503 13:58:29.090"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:34.090" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:58:29.090" endtime="20240503 13:58:34.090"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsTAB_SM59/tabpSIGN</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:58:34.090" endtime="20240503 13:58:34.370"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:39.371" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:58:34.370" endtime="20240503 13:58:39.371"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>072_display.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:39.371" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:39.377" level="INFO" html="true">&lt;a href="072_display.jpg"&gt;&lt;img src="072_display.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:39.371" endtime="20240503 13:58:39.377"/>
</kw>
<status status="PASS" starttime="20240503 13:58:12.231" endtime="20240503 13:58:39.377"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:58:10.026" endtime="20240503 13:58:39.377"/>
</test>
<kw name="System Logout" library="SLDAPICUST" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:58:39.377" endtime="20240503 13:58:39.653"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:44.653" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:58:39.653" endtime="20240503 13:58:44.653"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:44.653" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:44.653" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:44.653" endtime="20240503 13:58:44.653"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:54.654" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:58:44.653" endtime="20240503 13:58:54.654"/>
</kw>
<status status="PASS" starttime="20240503 13:58:39.377" endtime="20240503 13:58:54.654"/>
</kw>
<status status="PASS" starttime="20240503 13:57:57.430" endtime="20240503 13:58:54.654"/>
</suite>
<suite id="s1-s6" name="Test SM69" source="C:\SAP_Testing\SAPtesting\Tests\Test_SM69.robot">
<kw name="System Logon" library="SM69" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:58:04.975" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:58:04.975" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:58:04.975" endtime="20240503 13:58:04.975"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:14.975" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:58:04.975" endtime="20240503 13:58:14.975"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:58:14.975" endtime="20240503 13:58:14.982"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:58:14.982" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:58:14.982" endtime="20240503 13:58:15.742"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:58:15.742" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:58:15.773" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:58:15.742" endtime="20240503 13:58:15.773"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:58:15.773" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:58:15.794" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:58:15.773" endtime="20240503 13:58:15.794"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:58:15.794" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:58:15.794" endtime="20240503 13:58:15.794"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:58:15.794" endtime="20240503 13:58:16.203"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:16.203" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:16.203" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:16.203" endtime="20240503 13:58:16.203"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<msg timestamp="20240503 13:58:16.796" level="INFO">Multiple logon exists</msg>
<status status="PASS" starttime="20240503 13:58:16.203" endtime="20240503 13:58:16.796"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:17.796" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:16.796" endtime="20240503 13:58:17.796"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:17.796" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:17.800" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:17.796" endtime="20240503 13:58:17.800"/>
</kw>
<status status="PASS" starttime="20240503 13:58:04.975" endtime="20240503 13:58:17.800"/>
</kw>
<test id="s1-s6-t1" name="Executing SM69" line="10">
<kw name="Transaction SM69" library="SM69">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nsm69</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:58:17.801" endtime="20240503 13:58:19.017"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:58:19.017" endtime="20240503 13:58:19.536"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:20.537" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:19.536" endtime="20240503 13:58:20.537"/>
</kw>
<status status="PASS" starttime="20240503 13:58:17.801" endtime="20240503 13:58:20.537"/>
</kw>
<kw name="External Operating System Commands" library="SM69">
<kw name="Selected Rows" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cntlEXT_COM/shellcont/shell</arg>
<arg>23</arg>
<status status="PASS" starttime="20240503 13:58:20.537" endtime="20240503 13:58:21.192"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:22.193" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:21.192" endtime="20240503 13:58:22.193"/>
</kw>
<status status="PASS" starttime="20240503 13:58:20.537" endtime="20240503 13:58:22.193"/>
</kw>
<kw name="SM69 Scroll" library="SM69">
<kw name="Selected Rows" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cntlEXT_COM/shellcont/shell</arg>
<arg>46</arg>
<status status="PASS" starttime="20240503 13:58:22.193" endtime="20240503 13:58:22.694"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:23.694" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:22.694" endtime="20240503 13:58:23.694"/>
</kw>
<kw name="Selected Rows" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cntlEXT_COM/shellcont/shell</arg>
<arg>69</arg>
<status status="PASS" starttime="20240503 13:58:23.694" endtime="20240503 13:58:23.713"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:24.714" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:23.713" endtime="20240503 13:58:24.714"/>
</kw>
<kw name="Selected Rows" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cntlEXT_COM/shellcont/shell</arg>
<arg>92</arg>
<status status="PASS" starttime="20240503 13:58:24.714" endtime="20240503 13:58:24.733"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:25.733" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:24.733" endtime="20240503 13:58:25.733"/>
</kw>
<kw name="Selected Rows" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cntlEXT_COM/shellcont/shell</arg>
<arg>103</arg>
<status status="PASS" starttime="20240503 13:58:25.733" endtime="20240503 13:58:25.758"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:26.759" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:25.758" endtime="20240503 13:58:26.759"/>
</kw>
<status status="PASS" starttime="20240503 13:58:22.193" endtime="20240503 13:58:26.759"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:58:17.800" endtime="20240503 13:58:26.759"/>
</test>
<kw name="System Logout" library="SM69" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:58:26.759" endtime="20240503 13:58:27.045"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:32.045" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:58:27.045" endtime="20240503 13:58:32.045"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:32.045" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:32.045" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:32.045" endtime="20240503 13:58:32.045"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:42.045" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:58:32.045" endtime="20240503 13:58:42.045"/>
</kw>
<status status="PASS" starttime="20240503 13:58:26.759" endtime="20240503 13:58:42.045"/>
</kw>
<status status="PASS" starttime="20240503 13:58:04.959" endtime="20240503 13:58:42.045"/>
</suite>
<suite id="s1-s7" name="Test SMLG" source="C:\SAP_Testing\SAPtesting\Tests\Test_SMLG.robot">
<kw name="System Logon" library="SMLG" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:58:46.834" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:58:46.834" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:58:46.834" endtime="20240503 13:58:46.850"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:56.851" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:58:46.850" endtime="20240503 13:58:56.851"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:58:56.851" endtime="20240503 13:58:56.979"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:58:56.980" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:58:56.979" endtime="20240503 13:58:58.042"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:58:58.042" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:58:58.058" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:58:58.042" endtime="20240503 13:58:58.058"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:58:58.058" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:58:58.058" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:58:58.058" endtime="20240503 13:58:58.058"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:58:58.073" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:58:58.058" endtime="20240503 13:58:58.073"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:58:58.073" endtime="20240503 13:58:58.853"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:58.868" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:58.868" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:58.853" endtime="20240503 13:58:58.868"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 13:58:58.868" endtime="20240503 13:58:58.868"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:58:59.963" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:58:58.868" endtime="20240503 13:58:59.963"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:58:59.963" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:59.963" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:58:59.963" endtime="20240503 13:58:59.963"/>
</kw>
<status status="PASS" starttime="20240503 13:58:46.834" endtime="20240503 13:58:59.963"/>
</kw>
<test id="s1-s7-t1" name="Executing SMLG" line="9">
<kw name="Transaction SMLG" library="SMLG">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nSMLG</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:58:59.963" endtime="20240503 13:59:00.720"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:01.721" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:00.720" endtime="20240503 13:59:01.721"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>041_smlg.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:01.723" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:01.723" level="INFO" html="true">&lt;a href="041_smlg.jpg"&gt;&lt;img src="041_smlg.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:01.721" endtime="20240503 13:59:01.723"/>
</kw>
<status status="PASS" starttime="20240503 13:58:59.963" endtime="20240503 13:59:01.723"/>
</kw>
<kw name="SMLG Attributes" library="SMLG">
<kw name="Select Item From Guilabel" library="SAP_Tcode_Library">
<arg>wnd[0]/usr</arg>
<arg>BCSIDESSYS_BIS_00</arg>
<msg timestamp="20240503 13:59:02.104" level="INFO">Element found: BCSIDESSYS_BIS_00</msg>
<status status="PASS" starttime="20240503 13:59:01.727" endtime="20240503 13:59:02.104"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:03.105" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:02.104" endtime="20240503 13:59:03.105"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>042_smlg.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:03.107" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:03.107" level="INFO" html="true">&lt;a href="042_smlg.jpg"&gt;&lt;img src="042_smlg.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:03.105" endtime="20240503 13:59:03.107"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[14]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:03.107" endtime="20240503 13:59:03.351"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:04.351" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:03.351" endtime="20240503 13:59:04.351"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>043_smlg.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:04.351" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:04.357" level="INFO" html="true">&lt;a href="043_smlg.jpg"&gt;&lt;img src="043_smlg.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:04.351" endtime="20240503 13:59:04.357"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/usr/tabsSEL_TAB/tabpPROP</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:04.357" endtime="20240503 13:59:04.581"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:05.581" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:04.581" endtime="20240503 13:59:05.581"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>044_smlg.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:05.583" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:05.583" level="INFO" html="true">&lt;a href="044_smlg.jpg"&gt;&lt;img src="044_smlg.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:05.581" endtime="20240503 13:59:05.583"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[12]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:05.583" endtime="20240503 13:59:05.858"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:06.878" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:05.878" endtime="20240503 13:59:06.878"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>045_smlg.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:06.878" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:06.878" level="INFO" html="true">&lt;a href="045_smlg.jpg"&gt;&lt;img src="045_smlg.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:06.878" endtime="20240503 13:59:06.878"/>
</kw>
<status status="PASS" starttime="20240503 13:59:01.723" endtime="20240503 13:59:06.878"/>
</kw>
<kw name="SMLG Load Distributions" library="SMLG">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[5]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:06.883" endtime="20240503 13:59:07.127"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:08.128" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:07.127" endtime="20240503 13:59:08.128"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>046_smlg.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:08.129" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:08.129" level="INFO" html="true">&lt;a href="046_smlg.jpg"&gt;&lt;img src="046_smlg.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:08.128" endtime="20240503 13:59:08.129"/>
</kw>
<status status="PASS" starttime="20240503 13:59:06.883" endtime="20240503 13:59:08.129"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:58:59.963" endtime="20240503 13:59:08.129"/>
</test>
<kw name="System Logout" library="SMLG" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:59:08.129" endtime="20240503 13:59:08.424"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:13.425" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:59:08.424" endtime="20240503 13:59:13.425"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:13.425" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:13.425" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:13.425" endtime="20240503 13:59:13.425"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:23.425" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:59:13.425" endtime="20240503 13:59:23.425"/>
</kw>
<status status="PASS" starttime="20240503 13:59:08.129" endtime="20240503 13:59:23.425"/>
</kw>
<status status="PASS" starttime="20240503 13:58:46.824" endtime="20240503 13:59:23.425"/>
</suite>
<suite id="s1-s8" name="Test SMQR" source="C:\SAP_Testing\SAPtesting\Tests\Test_SMQR.robot">
<kw name="System Logon" library="SMQR" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:59:00.381" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:59:00.381" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:59:00.381" endtime="20240503 13:59:00.397"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:10.398" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:59:00.397" endtime="20240503 13:59:10.398"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:59:10.398" endtime="20240503 13:59:10.404"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:59:10.404" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:59:10.404" endtime="20240503 13:59:11.206"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:11.208" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:59:11.225" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:59:11.207" endtime="20240503 13:59:11.225"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:11.226" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:59:11.236" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:59:11.225" endtime="20240503 13:59:11.236"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:59:11.242" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:59:11.237" endtime="20240503 13:59:11.242"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:11.242" endtime="20240503 13:59:11.942"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:11.952" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:11.952" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:11.942" endtime="20240503 13:59:11.952"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 13:59:11.952" endtime="20240503 13:59:11.962"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:12.962" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:11.962" endtime="20240503 13:59:12.962"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:12.962" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:12.962" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:12.962" endtime="20240503 13:59:12.962"/>
</kw>
<status status="PASS" starttime="20240503 13:59:00.381" endtime="20240503 13:59:12.962"/>
</kw>
<test id="s1-s8-t1" name="Executing SMQR" line="11">
<kw name="Transaction SMQR" library="SMQR">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nsmqr</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:59:12.962" endtime="20240503 13:59:13.430"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:13.430" endtime="20240503 13:59:13.654"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>024_smqr.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:13.654" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:13.654" level="INFO" html="true">&lt;a href="024_smqr.jpg"&gt;&lt;img src="024_smqr.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:13.654" endtime="20240503 13:59:13.654"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:14.655" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:13.654" endtime="20240503 13:59:14.655"/>
</kw>
<status status="PASS" starttime="20240503 13:59:12.962" endtime="20240503 13:59:14.655"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:59:12.962" endtime="20240503 13:59:14.655"/>
</test>
<kw name="System Logout" library="SMQR" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:59:14.655" endtime="20240503 13:59:14.945"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:19.945" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:59:14.945" endtime="20240503 13:59:19.945"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:19.945" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:19.945" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:19.945" endtime="20240503 13:59:19.945"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:29.945" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:59:19.945" endtime="20240503 13:59:29.945"/>
</kw>
<status status="PASS" starttime="20240503 13:59:14.655" endtime="20240503 13:59:29.945"/>
</kw>
<status status="PASS" starttime="20240503 13:59:00.366" endtime="20240503 13:59:29.945"/>
</suite>
<suite id="s1-s9" name="Test SMQS" source="C:\SAP_Testing\SAPtesting\Tests\Test_SMQS.robot">
<kw name="System Logon" library="SMQS" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:59:28.332" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:59:28.332" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:59:28.316" endtime="20240503 13:59:28.332"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:38.332" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:59:28.332" endtime="20240503 13:59:38.332"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:59:38.332" endtime="20240503 13:59:38.332"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:59:38.341" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:59:38.332" endtime="20240503 13:59:39.013"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:39.023" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:59:39.118" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:59:39.013" endtime="20240503 13:59:39.118"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:39.118" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:59:39.128" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:59:39.118" endtime="20240503 13:59:39.128"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:59:39.128" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:59:39.128" endtime="20240503 13:59:39.128"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:39.128" endtime="20240503 13:59:39.953"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:39.964" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:39.964" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:39.953" endtime="20240503 13:59:39.964"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 13:59:39.964" endtime="20240503 13:59:39.974"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:40.974" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:39.974" endtime="20240503 13:59:40.974"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:40.976" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:40.976" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:40.974" endtime="20240503 13:59:40.976"/>
</kw>
<status status="PASS" starttime="20240503 13:59:28.316" endtime="20240503 13:59:40.976"/>
</kw>
<test id="s1-s9-t1" name="Executing SMQS" line="9">
<kw name="Transaction SMQS" library="SMQS">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nsmqs</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:59:40.976" endtime="20240503 13:59:41.435"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:41.435" endtime="20240503 13:59:41.659"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>007_smqs_QRFC Monitor.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:41.659" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:41.659" level="INFO" html="true">&lt;a href="007_smqs_QRFC%20Monitor.jpg"&gt;&lt;img src="007_smqs_QRFC%20Monitor.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:41.659" endtime="20240503 13:59:41.659"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:42.660" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:41.659" endtime="20240503 13:59:42.660"/>
</kw>
<status status="PASS" starttime="20240503 13:59:40.976" endtime="20240503 13:59:42.660"/>
</kw>
<kw name="QRFC Administration" library="SMQS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:42.660" endtime="20240503 13:59:42.904"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>008_smqs_QRFC Administration1.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:42.904" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:42.914" level="INFO" html="true">&lt;a href="008_smqs_QRFC%20Administration1.jpg"&gt;&lt;img src="008_smqs_QRFC%20Administration1.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:42.904" endtime="20240503 13:59:42.914"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>82</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:42.914" endtime="20240503 13:59:43.150"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>009_smqs_QRFC Administration2.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:43.150" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:43.161" level="INFO" html="true">&lt;a href="009_smqs_QRFC%20Administration2.jpg"&gt;&lt;img src="009_smqs_QRFC%20Administration2.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:43.150" endtime="20240503 13:59:43.161"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>82</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:43.161" endtime="20240503 13:59:43.394"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>010_smqs_QRFC Administration3.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:43.405" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:43.405" level="INFO" html="true">&lt;a href="010_smqs_QRFC%20Administration3.jpg"&gt;&lt;img src="010_smqs_QRFC%20Administration3.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:43.394" endtime="20240503 13:59:43.405"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>82</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:43.405" endtime="20240503 13:59:43.640"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>011_smqs_QRFC Administration4.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:43.640" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:43.649" level="INFO" html="true">&lt;a href="011_smqs_QRFC%20Administration4.jpg"&gt;&lt;img src="011_smqs_QRFC%20Administration4.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:43.640" endtime="20240503 13:59:43.649"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:43.649" endtime="20240503 13:59:43.904"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:44.904" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:43.904" endtime="20240503 13:59:44.904"/>
</kw>
<status status="PASS" starttime="20240503 13:59:42.660" endtime="20240503 13:59:44.904"/>
</kw>
<kw name="QRFC Administration INBOUND" library="SMQS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:44.904" endtime="20240503 13:59:45.163"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[0]/menu[1]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:45.163" endtime="20240503 13:59:45.442"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:46.442" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:45.442" endtime="20240503 13:59:46.442"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>012_smqs_QRFC Administration INBOUND.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:46.442" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:46.442" level="INFO" html="true">&lt;a href="012_smqs_QRFC%20Administration%20INBOUND.jpg"&gt;&lt;img src="012_smqs_QRFC%20Administration%20INBOUND.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:46.442" endtime="20240503 13:59:46.442"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:46.442" endtime="20240503 13:59:46.702"/>
</kw>
<status status="PASS" starttime="20240503 13:59:44.904" endtime="20240503 13:59:46.702"/>
</kw>
<kw name="QRFC Administration OUTBOUND" library="SMQS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[0]/menu[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:46.702" endtime="20240503 13:59:46.987"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:47.988" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:46.987" endtime="20240503 13:59:47.988"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>013_smqs_QRFC Administration OUTBOUND.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:47.988" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:47.988" level="INFO" html="true">&lt;a href="013_smqs_QRFC%20Administration%20OUTBOUND.jpg"&gt;&lt;img src="013_smqs_QRFC%20Administration%20OUTBOUND.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:47.988" endtime="20240503 13:59:47.988"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:47.988" endtime="20240503 13:59:48.264"/>
</kw>
<status status="PASS" starttime="20240503 13:59:46.702" endtime="20240503 13:59:48.264"/>
</kw>
<kw name="QRFC Administration OUTBOUND SCHEDULER" library="SMQS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[0]/menu[2]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:48.264" endtime="20240503 13:59:48.519"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:49.519" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:48.519" endtime="20240503 13:59:49.519"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>014_smqs_QRFC Administration OUTBOUND SCHEDULER.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:49.522" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:49.522" level="INFO" html="true">&lt;a href="014_smqs_QRFC%20Administration%20OUTBOUND%20SCHEDULER.jpg"&gt;&lt;img src="014_smqs_QRFC%20Administration%20OUTBOUND%20SCHEDULER.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:49.519" endtime="20240503 13:59:49.522"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:49.522" endtime="20240503 13:59:49.787"/>
</kw>
<status status="PASS" starttime="20240503 13:59:48.264" endtime="20240503 13:59:49.787"/>
</kw>
<kw name="QRFC Administration INBOUND SCHEDULER" library="SMQS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[0]/menu[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:49.787" endtime="20240503 13:59:50.071"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:51.071" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:50.071" endtime="20240503 13:59:51.071"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>015_smqs_QRFC Administration INBOUND SCHEDULER.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:51.071" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:51.071" level="INFO" html="true">&lt;a href="015_smqs_QRFC%20Administration%20INBOUND%20SCHEDULER.jpg"&gt;&lt;img src="015_smqs_QRFC%20Administration%20INBOUND%20SCHEDULER.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:51.071" endtime="20240503 13:59:51.071"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:51.071" endtime="20240503 13:59:51.325"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:51.325" endtime="20240503 13:59:51.583"/>
</kw>
<status status="PASS" starttime="20240503 13:59:49.787" endtime="20240503 13:59:51.583"/>
</kw>
<kw name="Display Possible Resources" library="SMQS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[1]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:51.583" endtime="20240503 13:59:51.835"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:52.835" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:51.835" endtime="20240503 13:59:52.835"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>016_smqs_Display Possible Resources.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:52.835" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:52.835" level="INFO" html="true">&lt;a href="016_smqs_Display%20Possible%20Resources.jpg"&gt;&lt;img src="016_smqs_Display%20Possible%20Resources.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:52.835" endtime="20240503 13:59:52.835"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:52.835" endtime="20240503 13:59:53.131"/>
</kw>
<status status="PASS" starttime="20240503 13:59:51.583" endtime="20240503 13:59:53.131"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:59:40.976" endtime="20240503 13:59:53.131"/>
</test>
<kw name="System Logout" library="SMQS" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:59:53.141" endtime="20240503 13:59:53.375"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:58.376" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:59:53.375" endtime="20240503 13:59:58.376"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:58.376" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:58.376" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:58.376" endtime="20240503 13:59:58.376"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:08.377" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:59:58.376" endtime="20240503 14:00:08.377"/>
</kw>
<status status="PASS" starttime="20240503 13:59:53.141" endtime="20240503 14:00:08.377"/>
</kw>
<status status="PASS" starttime="20240503 13:59:28.301" endtime="20240503 14:00:08.377"/>
</suite>
<suite id="s1-s10" name="Test SPAD" source="C:\SAP_Testing\SAPtesting\Tests\Test_SPAD.robot">
<kw name="System Logon" library="SPAD" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 13:59:34.589" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 13:59:34.589" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 13:59:34.589" endtime="20240503 13:59:34.589"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:44.589" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 13:59:34.589" endtime="20240503 13:59:44.589"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 13:59:44.589" endtime="20240503 13:59:44.592"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 13:59:44.592" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 13:59:44.592" endtime="20240503 13:59:46.485"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:46.485" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 13:59:46.485" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 13:59:46.485" endtime="20240503 13:59:46.485"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:46.485" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 13:59:46.500" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 13:59:46.485" endtime="20240503 13:59:46.500"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 13:59:46.500" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 13:59:46.500" endtime="20240503 13:59:46.500"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 13:59:46.500" endtime="20240503 13:59:46.918"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:46.918" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:46.918" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:46.918" endtime="20240503 13:59:46.918"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<msg timestamp="20240503 13:59:47.532" level="INFO">Multiple logon exists</msg>
<status status="PASS" starttime="20240503 13:59:46.918" endtime="20240503 13:59:47.532"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:48.532" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:47.532" endtime="20240503 13:59:48.532"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:48.532" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:48.532" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:48.532" endtime="20240503 13:59:48.532"/>
</kw>
<status status="PASS" starttime="20240503 13:59:34.578" endtime="20240503 13:59:48.532"/>
</kw>
<test id="s1-s10-t1" name="Executing SPAD" line="9">
<kw name="Transaction SPAD" library="SPAD">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nSPAD</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:59:48.532" endtime="20240503 13:59:49.023"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:50.023" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:49.023" endtime="20240503 13:59:50.023"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>058_spad.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:50.023" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:50.023" level="INFO" html="true">&lt;a href="058_spad.jpg"&gt;&lt;img src="058_spad.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:50.023" endtime="20240503 13:59:50.023"/>
</kw>
<status status="PASS" starttime="20240503 13:59:48.532" endtime="20240503 13:59:50.023"/>
</kw>
<kw name="ARCH Screenshot" library="SPAD">
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE</arg>
<arg>ARCH</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:50.054" level="INFO">Typing text 'ARCH' into text field 'wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE'.</msg>
<status status="PASS" starttime="20240503 13:59:50.023" endtime="20240503 13:59:50.054"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>059_spad_arch.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:50.054" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:50.054" level="INFO" html="true">&lt;a href="059_spad_arch.jpg"&gt;&lt;img src="059_spad_arch.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:50.054" endtime="20240503 13:59:50.054"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/btn%#AUTOTEXT001</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:50.054" endtime="20240503 13:59:50.414"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:51.414" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:50.414" endtime="20240503 13:59:51.414"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>060_spad_arch.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:51.414" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:51.414" level="INFO" html="true">&lt;a href="060_spad_arch.jpg"&gt;&lt;img src="060_spad_arch.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:51.414" endtime="20240503 13:59:51.414"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:51.414" endtime="20240503 13:59:51.684"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:52.684" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:51.684" endtime="20240503 13:59:52.684"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>061_spad_arch.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:52.685" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:52.689" level="INFO" html="true">&lt;a href="061_spad_arch.jpg"&gt;&lt;img src="061_spad_arch.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:52.685" endtime="20240503 13:59:52.689"/>
</kw>
<status status="PASS" starttime="20240503 13:59:50.023" endtime="20240503 13:59:52.689"/>
</kw>
<kw name="LOCL Screenshot" library="SPAD">
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE</arg>
<arg>Ctrl+A</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:52.706" level="INFO">Typing text 'Ctrl+A' into text field 'wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE'.</msg>
<status status="PASS" starttime="20240503 13:59:52.689" endtime="20240503 13:59:52.706"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE</arg>
<arg>LOCL</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:52.716" level="INFO">Typing text 'LOCL' into text field 'wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE'.</msg>
<status status="PASS" starttime="20240503 13:59:52.706" endtime="20240503 13:59:52.716"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>062_spad_locl.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:52.716" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:52.716" level="INFO" html="true">&lt;a href="062_spad_locl.jpg"&gt;&lt;img src="062_spad_locl.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:52.716" endtime="20240503 13:59:52.716"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/btn%#AUTOTEXT001</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:52.716" endtime="20240503 13:59:53.037"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:54.037" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:53.037" endtime="20240503 13:59:54.037"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>063_spad_locl.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:54.041" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:54.041" level="INFO" html="true">&lt;a href="063_spad_locl.jpg"&gt;&lt;img src="063_spad_locl.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:54.037" endtime="20240503 13:59:54.041"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:54.041" endtime="20240503 13:59:54.303"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:55.303" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:54.303" endtime="20240503 13:59:55.303"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>064_spad_locl.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:55.306" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:55.306" level="INFO" html="true">&lt;a href="064_spad_locl.jpg"&gt;&lt;img src="064_spad_locl.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:55.303" endtime="20240503 13:59:55.306"/>
</kw>
<status status="PASS" starttime="20240503 13:59:52.689" endtime="20240503 13:59:55.306"/>
</kw>
<kw name="LP01 Screenshot" library="SPAD">
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE</arg>
<arg>Ctrl+A</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:55.317" level="INFO">Typing text 'Ctrl+A' into text field 'wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE'.</msg>
<status status="PASS" starttime="20240503 13:59:55.306" endtime="20240503 13:59:55.317"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE</arg>
<arg>LP01</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:55.327" level="INFO">Typing text 'LP01' into text field 'wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE'.</msg>
<status status="PASS" starttime="20240503 13:59:55.317" endtime="20240503 13:59:55.327"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>065_spad_lp01.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:55.327" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:55.327" level="INFO" html="true">&lt;a href="065_spad_lp01.jpg"&gt;&lt;img src="065_spad_lp01.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:55.327" endtime="20240503 13:59:55.327"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/btn%#AUTOTEXT001</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:55.327" endtime="20240503 13:59:55.655"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:56.655" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:55.655" endtime="20240503 13:59:56.655"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>066_spad_lp01.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:56.655" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:56.655" level="INFO" html="true">&lt;a href="066_spad_lp01.jpg"&gt;&lt;img src="066_spad_lp01.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:56.655" endtime="20240503 13:59:56.655"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:56.655" endtime="20240503 13:59:56.928"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:57.929" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:56.928" endtime="20240503 13:59:57.929"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>067_spad_lp01.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:57.929" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:57.929" level="INFO" html="true">&lt;a href="067_spad_lp01.jpg"&gt;&lt;img src="067_spad_lp01.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:57.929" endtime="20240503 13:59:57.929"/>
</kw>
<status status="PASS" starttime="20240503 13:59:55.306" endtime="20240503 13:59:57.929"/>
</kw>
<kw name="ZPDF Screenshot" library="SPAD">
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE</arg>
<arg>Ctrl+A</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:57.935" level="INFO">Typing text 'Ctrl+A' into text field 'wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE'.</msg>
<status status="PASS" starttime="20240503 13:59:57.929" endtime="20240503 13:59:57.935"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE</arg>
<arg>ZPDF</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 13:59:57.945" level="INFO">Typing text 'ZPDF' into text field 'wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/ctxtRSPOSEL-DEVICE'.</msg>
<status status="PASS" starttime="20240503 13:59:57.935" endtime="20240503 13:59:57.945"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>068_spad_zpdf.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:57.955" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:57.955" level="INFO" html="true">&lt;a href="068_spad_zpdf.jpg"&gt;&lt;img src="068_spad_zpdf.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:57.945" endtime="20240503 13:59:57.955"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsSELECTIONS/tabpSEL1/ssubPAGE:SAPMSPAD:1041/btn%#AUTOTEXT001</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 13:59:57.955" endtime="20240503 13:59:58.264"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 13:59:59.265" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 13:59:58.264" endtime="20240503 13:59:59.265"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>069_spad_zpdf.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 13:59:59.268" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:59.268" level="INFO" html="true">&lt;a href="069_spad_zpdf.jpg"&gt;&lt;img src="069_spad_zpdf.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 13:59:59.265" endtime="20240503 13:59:59.268"/>
</kw>
<status status="PASS" starttime="20240503 13:59:57.929" endtime="20240503 13:59:59.268"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 13:59:48.532" endtime="20240503 13:59:59.268"/>
</test>
<kw name="System Logout" library="SPAD" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 13:59:59.268" endtime="20240503 13:59:59.556"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:04.556" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 13:59:59.556" endtime="20240503 14:00:04.556"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:04.558" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:04.558" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:04.556" endtime="20240503 14:00:04.558"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:14.559" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:00:04.558" endtime="20240503 14:00:14.559"/>
</kw>
<status status="PASS" starttime="20240503 13:59:59.268" endtime="20240503 14:00:14.559"/>
</kw>
<status status="PASS" starttime="20240503 13:59:34.568" endtime="20240503 14:00:14.559"/>
</suite>
<suite id="s1-s11" name="Test STMS" source="C:\SAP_Testing\SAPtesting\Tests\Test_STMS.robot">
<kw name="System Logon" library="STMS" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 14:00:14.043" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 14:00:14.043" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 14:00:14.043" endtime="20240503 14:00:14.054"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:24.055" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:00:14.054" endtime="20240503 14:00:24.055"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 14:00:24.055" endtime="20240503 14:00:24.062"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 14:00:24.062" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 14:00:24.062" endtime="20240503 14:00:24.865"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:00:24.865" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 14:00:24.896" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 14:00:24.865" endtime="20240503 14:00:24.896"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:00:24.896" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 14:00:24.906" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 14:00:24.896" endtime="20240503 14:00:24.906"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 14:00:24.916" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 14:00:24.906" endtime="20240503 14:00:24.916"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 14:00:24.916" endtime="20240503 14:00:25.660"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:25.670" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:25.670" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:25.660" endtime="20240503 14:00:25.670"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 14:00:25.670" endtime="20240503 14:00:25.680"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:26.681" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:25.680" endtime="20240503 14:00:26.681"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:26.681" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:26.681" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:26.681" endtime="20240503 14:00:26.681"/>
</kw>
<status status="PASS" starttime="20240503 14:00:14.043" endtime="20240503 14:00:26.681"/>
</kw>
<test id="s1-s11-t1" name="Executing STMS" line="10">
<kw name="Transaction STMS" library="STMS">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nSTMS</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:00:26.681" endtime="20240503 14:00:27.952"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:28.953" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:27.952" endtime="20240503 14:00:28.953"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>073_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:28.955" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:28.955" level="INFO" html="true">&lt;a href="073_stms.jpg"&gt;&lt;img src="073_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:28.953" endtime="20240503 14:00:28.955"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[0]/menu[4]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:28.955" endtime="20240503 14:00:29.939"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:30.939" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:29.939" endtime="20240503 14:00:30.939"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>074_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:30.939" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:30.939" level="INFO" html="true">&lt;a href="074_stms.jpg"&gt;&lt;img src="074_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:30.939" endtime="20240503 14:00:30.939"/>
</kw>
<kw name="Rows From Stms" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cntlGRID1/shellcont/shell</arg>
<msg timestamp="20240503 14:00:31.447" level="INFO">wnd[0]/usr/cntlGRID1/shellcont/shell
6
6
0
BIS</msg>
<status status="PASS" starttime="20240503 14:00:30.939" endtime="20240503 14:00:31.447"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:32.447" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:31.447" endtime="20240503 14:00:32.447"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>075_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:32.447" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:32.453" level="INFO" html="true">&lt;a href="075_stms.jpg"&gt;&lt;img src="075_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:32.447" endtime="20240503 14:00:32.453"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsGN_DYN150_TAB_STRIP/tabpATTR</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:32.453" endtime="20240503 14:00:32.463"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:34.464" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:32.463" endtime="20240503 14:00:34.464"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>076_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:34.464" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:34.467" level="INFO" html="true">&lt;a href="076_stms.jpg"&gt;&lt;img src="076_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:34.464" endtime="20240503 14:00:34.467"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsGN_DYN150_TAB_STRIP/tabpDOMA</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:34.467" endtime="20240503 14:00:34.945"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:35.945" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:34.945" endtime="20240503 14:00:35.945"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>077_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:35.945" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:35.945" level="INFO" html="true">&lt;a href="077_stms.jpg"&gt;&lt;img src="077_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:35.945" endtime="20240503 14:00:35.945"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/tabsGN_DYN150_TAB_STRIP/tabpTPPE</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:35.945" endtime="20240503 14:00:36.433"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:37.433" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:36.433" endtime="20240503 14:00:37.433"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>078_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:37.435" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:37.435" level="INFO" html="true">&lt;a href="078_stms.jpg"&gt;&lt;img src="078_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:37.433" endtime="20240503 14:00:37.435"/>
</kw>
<status status="PASS" starttime="20240503 14:00:26.681" endtime="20240503 14:00:37.435"/>
</kw>
<kw name="Import Overview" library="STMS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:37.435" endtime="20240503 14:00:38.140"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:39.140" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:38.140" endtime="20240503 14:00:39.140"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>079_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:39.140" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:39.140" level="INFO" html="true">&lt;a href="079_stms.jpg"&gt;&lt;img src="079_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:39.140" endtime="20240503 14:00:39.140"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:39.140" endtime="20240503 14:00:39.625"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:40.625" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:39.625" endtime="20240503 14:00:40.625"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>080_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:40.625" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:40.625" level="INFO" html="true">&lt;a href="080_stms.jpg"&gt;&lt;img src="080_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:40.625" endtime="20240503 14:00:40.625"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[5]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:40.625" endtime="20240503 14:00:40.897"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:41.897" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:40.897" endtime="20240503 14:00:41.897"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>081_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:41.900" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:41.900" level="INFO" html="true">&lt;a href="081_stms.jpg"&gt;&lt;img src="081_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:41.897" endtime="20240503 14:00:41.900"/>
</kw>
<status status="PASS" starttime="20240503 14:00:37.435" endtime="20240503 14:00:41.900"/>
</kw>
<kw name="Transport Routes" library="STMS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:41.902" endtime="20240503 14:00:42.155"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:43.156" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:42.155" endtime="20240503 14:00:43.156"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>082a_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:43.159" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:43.159" level="INFO" html="true">&lt;a href="082a_stms.jpg"&gt;&lt;img src="082a_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:43.156" endtime="20240503 14:00:43.159"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[19]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:43.159" endtime="20240503 14:00:44.222"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:45.222" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:44.222" endtime="20240503 14:00:45.222"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>082b_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:45.222" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:45.222" level="INFO" html="true">&lt;a href="082b_stms.jpg"&gt;&lt;img src="082b_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:45.222" endtime="20240503 14:00:45.222"/>
</kw>
<status status="PASS" starttime="20240503 14:00:41.900" endtime="20240503 14:00:45.226"/>
</kw>
<kw name="Transport Layers" library="STMS">
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[2]/menu[1]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:00:45.226" endtime="20240503 14:00:46.400"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:47.400" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:46.400" endtime="20240503 14:00:47.400"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>083_stms.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:47.402" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:47.402" level="INFO" html="true">&lt;a href="083_stms.jpg"&gt;&lt;img src="083_stms.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:47.400" endtime="20240503 14:00:47.402"/>
</kw>
<status status="PASS" starttime="20240503 14:00:45.226" endtime="20240503 14:00:47.402"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 14:00:26.681" endtime="20240503 14:00:47.402"/>
</test>
<kw name="System Logout" library="STMS" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:00:47.402" endtime="20240503 14:00:47.637"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:52.637" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 14:00:47.637" endtime="20240503 14:00:52.637"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:52.637" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:52.637" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:52.637" endtime="20240503 14:00:52.637"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:02.637" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:00:52.637" endtime="20240503 14:01:02.637"/>
</kw>
<status status="PASS" starttime="20240503 14:00:47.402" endtime="20240503 14:01:02.637"/>
</kw>
<status status="PASS" starttime="20240503 14:00:14.028" endtime="20240503 14:01:02.637"/>
</suite>
<suite id="s1-s12" name="Test STRUST" source="C:\SAP_Testing\SAPtesting\Tests\Test_STRUST.robot">
<kw name="System Logon" library="STRUST" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 14:00:19.587" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 14:00:19.587" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 14:00:19.587" endtime="20240503 14:00:19.587"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:29.587" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:00:19.587" endtime="20240503 14:00:29.587"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 14:00:29.587" endtime="20240503 14:00:29.587"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 14:00:29.587" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 14:00:29.587" endtime="20240503 14:00:30.315"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:00:30.315" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 14:00:30.417" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 14:00:30.315" endtime="20240503 14:00:30.417"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:00:30.417" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 14:00:30.427" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 14:00:30.417" endtime="20240503 14:00:30.427"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 14:00:30.427" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 14:00:30.427" endtime="20240503 14:00:30.427"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 14:00:30.427" endtime="20240503 14:00:30.844"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:30.854" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:30.854" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:30.844" endtime="20240503 14:00:30.854"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<msg timestamp="20240503 14:00:31.559" level="INFO">Multiple logon exists</msg>
<status status="PASS" starttime="20240503 14:00:30.854" endtime="20240503 14:00:31.559"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:32.559" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:00:31.559" endtime="20240503 14:00:32.559"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:32.559" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:32.559" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:32.559" endtime="20240503 14:00:32.559"/>
</kw>
<status status="PASS" starttime="20240503 14:00:19.587" endtime="20240503 14:00:32.559"/>
</kw>
<test id="s1-s12-t1" name="Executing STRUST" line="9">
<kw name="Transaction STRUST" library="STRUST">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nstrust</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:00:32.559" endtime="20240503 14:00:33.406"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 14:00:33.406" endtime="20240503 14:00:33.895"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>029_PSE.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:33.895" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:33.895" level="INFO" html="true">&lt;a href="029_PSE.jpg"&gt;&lt;img src="029_PSE.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:33.895" endtime="20240503 14:00:33.895"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:35.895" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:33.895" endtime="20240503 14:00:35.895"/>
</kw>
<kw name="Scroll Pagedown" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/btnCERTDETAIL</arg>
<status status="PASS" starttime="20240503 14:00:35.895" endtime="20240503 14:00:35.961"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:37.961" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:35.961" endtime="20240503 14:00:37.961"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>030_PSE.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:37.961" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:37.961" level="INFO" html="true">&lt;a href="030_PSE.jpg"&gt;&lt;img src="030_PSE.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:37.961" endtime="20240503 14:00:37.961"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:39.962" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:37.961" endtime="20240503 14:00:39.962"/>
</kw>
<status status="PASS" starttime="20240503 14:00:32.559" endtime="20240503 14:00:39.962"/>
</kw>
<kw name="SSL server standard" library="STRUST">
<kw name="Double Click On Tree Item" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>SSLSDFAULT</arg>
<status status="PASS" starttime="20240503 14:00:39.962" endtime="20240503 14:00:40.498"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:42.498" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:40.498" endtime="20240503 14:00:42.498"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>031_SSLSDFAULT.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:42.498" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:42.506" level="INFO" html="true">&lt;a href="031_SSLSDFAULT.jpg"&gt;&lt;img src="031_SSLSDFAULT.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:42.498" endtime="20240503 14:00:42.506"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:44.506" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:42.506" endtime="20240503 14:00:44.506"/>
</kw>
<kw name="Scroll Pagedown" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/btnCERTDETAIL</arg>
<status status="PASS" starttime="20240503 14:00:44.506" endtime="20240503 14:00:44.564"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:46.564" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:44.564" endtime="20240503 14:00:46.564"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>032_SSLSDFAULT.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:46.564" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:46.564" level="INFO" html="true">&lt;a href="032_SSLSDFAULT.jpg"&gt;&lt;img src="032_SSLSDFAULT.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:46.564" endtime="20240503 14:00:46.564"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:48.565" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:46.564" endtime="20240503 14:00:48.565"/>
</kw>
<status status="PASS" starttime="20240503 14:00:39.962" endtime="20240503 14:00:48.565"/>
</kw>
<kw name="SSL client SSL Client (Anonymous)" library="STRUST">
<kw name="Double Click On Tree Item" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>SSLCANONYM</arg>
<status status="PASS" starttime="20240503 14:00:48.565" endtime="20240503 14:00:49.064"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:51.064" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:49.064" endtime="20240503 14:00:51.064"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>033_SSLCANONYM.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:51.064" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:51.064" level="INFO" html="true">&lt;a href="033_SSLCANONYM.jpg"&gt;&lt;img src="033_SSLCANONYM.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:51.064" endtime="20240503 14:00:51.068"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:53.069" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:51.069" endtime="20240503 14:00:53.069"/>
</kw>
<kw name="Scroll Pagedown" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/btnCERTDETAIL</arg>
<status status="PASS" starttime="20240503 14:00:53.069" endtime="20240503 14:00:53.126"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:55.126" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:53.126" endtime="20240503 14:00:55.126"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>034_SSLCANONYM.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:55.126" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:55.126" level="INFO" html="true">&lt;a href="034_SSLCANONYM.jpg"&gt;&lt;img src="034_SSLCANONYM.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:55.126" endtime="20240503 14:00:55.126"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:57.126" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:55.126" endtime="20240503 14:00:57.126"/>
</kw>
<status status="PASS" starttime="20240503 14:00:48.565" endtime="20240503 14:00:57.126"/>
</kw>
<kw name="SSL client SSL Client (Standard)" library="STRUST">
<kw name="Double Click On Tree Item" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>SSLCDFAULT</arg>
<status status="PASS" starttime="20240503 14:00:57.126" endtime="20240503 14:00:57.651"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:00:59.651" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:57.651" endtime="20240503 14:00:59.651"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>035_SSLCDFAULT.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:00:59.653" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:59.653" level="INFO" html="true">&lt;a href="035_SSLCDFAULT.jpg"&gt;&lt;img src="035_SSLCDFAULT.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:00:59.651" endtime="20240503 14:00:59.653"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:01.653" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:00:59.653" endtime="20240503 14:01:01.653"/>
</kw>
<kw name="Scroll Pagedown" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/btnCERTDETAIL</arg>
<status status="PASS" starttime="20240503 14:01:01.653" endtime="20240503 14:01:01.713"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:03.714" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:01.713" endtime="20240503 14:01:03.714"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>036_SSLCDFAULT.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:03.714" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:03.714" level="INFO" html="true">&lt;a href="036_SSLCDFAULT.jpg"&gt;&lt;img src="036_SSLCDFAULT.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:03.714" endtime="20240503 14:01:03.714"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:05.714" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:03.714" endtime="20240503 14:01:05.714"/>
</kw>
<status status="PASS" starttime="20240503 14:00:57.126" endtime="20240503 14:01:05.714"/>
</kw>
<kw name="WS Security Other System Encryption" library="STRUST">
<kw name="Double Click On Tree Item" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>WSSEWSSCRT</arg>
<status status="PASS" starttime="20240503 14:01:05.714" endtime="20240503 14:01:06.263"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:08.297" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:06.263" endtime="20240503 14:01:08.297"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>037_WSSEWSSCRT.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:08.297" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:08.297" level="INFO" html="true">&lt;a href="037_WSSEWSSCRT.jpg"&gt;&lt;img src="037_WSSEWSSCRT.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:08.297" endtime="20240503 14:01:08.297"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:10.298" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:08.297" endtime="20240503 14:01:10.298"/>
</kw>
<kw name="Scroll Pagedown" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/btnCERTDETAIL</arg>
<status status="PASS" starttime="20240503 14:01:10.298" endtime="20240503 14:01:10.345"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:12.346" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:10.345" endtime="20240503 14:01:12.346"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>038_WSSEWSSCRT.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:12.346" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:12.346" level="INFO" html="true">&lt;a href="038_WSSEWSSCRT.jpg"&gt;&lt;img src="038_WSSEWSSCRT.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:12.346" endtime="20240503 14:01:12.346"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:14.346" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:12.346" endtime="20240503 14:01:14.346"/>
</kw>
<status status="PASS" starttime="20240503 14:01:05.714" endtime="20240503 14:01:14.347"/>
</kw>
<kw name="SSF Logon Ticket" library="STRUST">
<kw name="Double Click On Tree Item" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>SSFASSO2</arg>
<status status="PASS" starttime="20240503 14:01:14.348" endtime="20240503 14:01:14.842"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:16.843" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:14.842" endtime="20240503 14:01:16.843"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>039_SSFASSO2.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:16.845" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:16.845" level="INFO" html="true">&lt;a href="039_SSFASSO2.jpg"&gt;&lt;img src="039_SSFASSO2.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:16.843" endtime="20240503 14:01:16.845"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:18.845" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:16.845" endtime="20240503 14:01:18.845"/>
</kw>
<kw name="Scroll Pagedown" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/btnCERTDETAIL</arg>
<status status="PASS" starttime="20240503 14:01:18.845" endtime="20240503 14:01:18.912"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:20.913" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:18.912" endtime="20240503 14:01:20.913"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>040_SSFASSO2.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:20.913" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:20.913" level="INFO" html="true">&lt;a href="040_SSFASSO2.jpg"&gt;&lt;img src="040_SSFASSO2.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:20.913" endtime="20240503 14:01:20.913"/>
</kw>
<status status="PASS" starttime="20240503 14:01:14.347" endtime="20240503 14:01:20.913"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 14:00:32.559" endtime="20240503 14:01:20.913"/>
</test>
<kw name="System Logout" library="STRUST" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:01:20.913" endtime="20240503 14:01:21.191"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:26.196" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 14:01:21.195" endtime="20240503 14:01:26.196"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:26.197" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:26.197" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:26.196" endtime="20240503 14:01:26.197"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:36.199" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:01:26.197" endtime="20240503 14:01:36.199"/>
</kw>
<status status="PASS" starttime="20240503 14:01:20.913" endtime="20240503 14:01:36.199"/>
</kw>
<status status="PASS" starttime="20240503 14:00:19.567" endtime="20240503 14:01:36.199"/>
</suite>
<suite id="s1-s13" name="Test Uconcockpit" source="C:\SAP_Testing\SAPtesting\Tests\Test_Uconcockpit.robot">
<kw name="System Logon" library="Uconcockpit" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 14:01:08.448" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 14:01:08.448" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 14:01:08.448" endtime="20240503 14:01:08.448"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:18.449" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:01:08.448" endtime="20240503 14:01:18.449"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 14:01:18.449" endtime="20240503 14:01:18.449"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 14:01:18.449" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 14:01:18.449" endtime="20240503 14:01:20.360"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:01:20.360" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 14:01:20.370" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 14:01:20.360" endtime="20240503 14:01:20.370"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:01:20.370" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 14:01:20.380" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 14:01:20.370" endtime="20240503 14:01:20.380"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 14:01:20.380" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 14:01:20.380" endtime="20240503 14:01:20.386"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 14:01:20.386" endtime="20240503 14:01:20.816"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:20.827" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:20.827" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:20.816" endtime="20240503 14:01:20.827"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<msg timestamp="20240503 14:01:21.464" level="INFO">Multiple logon exists</msg>
<status status="PASS" starttime="20240503 14:01:20.827" endtime="20240503 14:01:21.464"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:22.464" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:01:21.464" endtime="20240503 14:01:22.464"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:22.468" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:22.468" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:22.464" endtime="20240503 14:01:22.468"/>
</kw>
<status status="PASS" starttime="20240503 14:01:08.448" endtime="20240503 14:01:22.468"/>
</kw>
<test id="s1-s13-t1" name="Executing Uconcockpit" line="9">
<kw name="Transaction Uconcockpit" library="Uconcockpit">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nUconcockpit</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:01:22.468" endtime="20240503 14:01:22.969"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 14:01:22.969" endtime="20240503 14:01:23.417"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>047_Uconcockpit.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:23.428" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:23.428" level="INFO" html="true">&lt;a href="047_Uconcockpit.jpg"&gt;&lt;img src="047_Uconcockpit.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:23.417" endtime="20240503 14:01:23.428"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:25.429" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:23.428" endtime="20240503 14:01:25.429"/>
</kw>
<status status="PASS" starttime="20240503 14:01:22.468" endtime="20240503 14:01:25.429"/>
</kw>
<kw name="RFC Basic Scenario" library="Uconcockpit">
<kw name="Select From List By Label" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cmbP_SCEN</arg>
<arg>RFC Basic Scenario</arg>
<doc>Selects the specified option from the selection list.</doc>
<status status="PASS" starttime="20240503 14:01:25.429" endtime="20240503 14:01:25.667"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:27.678" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:25.677" endtime="20240503 14:01:27.678"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>048_Uconcockpit.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:27.678" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:27.678" level="INFO" html="true">&lt;a href="048_Uconcockpit.jpg"&gt;&lt;img src="048_Uconcockpit.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:27.678" endtime="20240503 14:01:27.678"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[8]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:01:27.678" endtime="20240503 14:01:28.970"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:30.971" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:28.970" endtime="20240503 14:01:30.971"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>049_Uconcockpit.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:30.972" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:30.972" level="INFO" html="true">&lt;a href="049_Uconcockpit.jpg"&gt;&lt;img src="049_Uconcockpit.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:30.971" endtime="20240503 14:01:30.972"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:01:30.972" endtime="20240503 14:01:31.239"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:33.241" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:31.239" endtime="20240503 14:01:33.241"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>050_Uconcockpit.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:33.315" level="INFO" html="true">&lt;a href="050_Uconcockpit.jpg"&gt;&lt;img src="050_Uconcockpit.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:33.241" endtime="20240503 14:01:33.315"/>
</kw>
<status status="PASS" starttime="20240503 14:01:25.429" endtime="20240503 14:01:33.315"/>
</kw>
<kw name="Role Building Scenario" library="Uconcockpit">
<kw name="Select From List By Label" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/cmbP_SCEN</arg>
<arg>Role Building Scenario</arg>
<doc>Selects the specified option from the selection list.</doc>
<status status="PASS" starttime="20240503 14:01:33.315" endtime="20240503 14:01:33.629"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:35.630" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:33.629" endtime="20240503 14:01:35.630"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>051_Uconcockpit.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:35.697" level="INFO" html="true">&lt;a href="051_Uconcockpit.jpg"&gt;&lt;img src="051_Uconcockpit.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:35.630" endtime="20240503 14:01:35.697"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[8]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:01:35.697" endtime="20240503 14:01:36.620"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:38.622" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:36.620" endtime="20240503 14:01:38.622"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>052_Uconcockpit.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:38.678" level="INFO" html="true">&lt;a href="052_Uconcockpit.jpg"&gt;&lt;img src="052_Uconcockpit.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:38.622" endtime="20240503 14:01:38.678"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:01:38.679" endtime="20240503 14:01:39.134"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:41.135" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:01:39.134" endtime="20240503 14:01:41.135"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>053_Uconcockpit.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:41.216" level="INFO" html="true">&lt;a href="053_Uconcockpit.jpg"&gt;&lt;img src="053_Uconcockpit.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:41.135" endtime="20240503 14:01:41.216"/>
</kw>
<status status="PASS" starttime="20240503 14:01:33.315" endtime="20240503 14:01:41.216"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 14:01:22.468" endtime="20240503 14:01:41.216"/>
</test>
<kw name="System Logout" library="Uconcockpit" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:01:41.216" endtime="20240503 14:01:41.536"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:46.537" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 14:01:41.536" endtime="20240503 14:01:46.537"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:46.580" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:46.537" endtime="20240503 14:01:46.580"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:56.590" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:01:46.580" endtime="20240503 14:01:56.590"/>
</kw>
<status status="PASS" starttime="20240503 14:01:41.216" endtime="20240503 14:01:56.590"/>
</kw>
<status status="PASS" starttime="20240503 14:01:08.432" endtime="20240503 14:01:56.590"/>
</suite>
<suite id="s1-s14" name="Test WE20" source="C:\SAP_Testing\SAPtesting\Tests\Test_WE20.robot">
<kw name="System Logon" library="WE20" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 14:01:42.556" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 14:01:42.556" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 14:01:42.556" endtime="20240503 14:01:42.556"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:52.557" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:01:42.556" endtime="20240503 14:01:52.557"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 14:01:52.557" endtime="20240503 14:01:52.585"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 14:01:52.585" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 14:01:52.585" endtime="20240503 14:01:53.409"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:01:53.409" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 14:01:53.445" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 14:01:53.409" endtime="20240503 14:01:53.445"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:01:53.445" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 14:01:53.458" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 14:01:53.445" endtime="20240503 14:01:53.458"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 14:01:53.458" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 14:01:53.458" endtime="20240503 14:01:53.458"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 14:01:53.458" endtime="20240503 14:01:54.195"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:54.280" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:54.195" endtime="20240503 14:01:54.280"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 14:01:54.280" endtime="20240503 14:01:54.280"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:55.281" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:01:54.280" endtime="20240503 14:01:55.281"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:55.330" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:55.281" endtime="20240503 14:01:55.330"/>
</kw>
<status status="PASS" starttime="20240503 14:01:42.556" endtime="20240503 14:01:55.330"/>
</kw>
<test id="s1-s14-t1" name="Executing WE20" line="9">
<kw name="Transaction WE20" library="WE20">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nwe20</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:01:55.330" endtime="20240503 14:01:56.136"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:57.136" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:01:56.136" endtime="20240503 14:01:57.136"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>084_WE20.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:57.183" level="INFO" html="true">&lt;a href="084_WE20.jpg"&gt;&lt;img src="084_WE20.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:57.136" endtime="20240503 14:01:57.183"/>
</kw>
<status status="PASS" starttime="20240503 14:01:55.330" endtime="20240503 14:01:57.183"/>
</kw>
<kw name="Partner type LS" library="WE20">
<kw name="Select Node" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>LS</arg>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</doc>
<status status="PASS" starttime="20240503 14:01:57.183" endtime="20240503 14:01:57.269"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:58.270" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:01:57.269" endtime="20240503 14:01:58.270"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>085_typeLS.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:58.301" level="INFO" html="true">&lt;a href="085_typeLS.jpg"&gt;&lt;img src="085_typeLS.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:58.270" endtime="20240503 14:01:58.301"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[46]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:01:58.301" endtime="20240503 14:01:58.894"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:01:59.896" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:01:58.894" endtime="20240503 14:01:59.896"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>086_typeLS.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:01:59.967" level="INFO" html="true">&lt;a href="086_typeLS.jpg"&gt;&lt;img src="086_typeLS.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:01:59.896" endtime="20240503 14:01:59.967"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[1]/usr/ctxtGSO_PTYP-LOW</arg>
<arg>LS</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:02:00.146" level="INFO">Typing text 'LS' into text field 'wnd[1]/usr/ctxtGSO_PTYP-LOW'.</msg>
<status status="PASS" starttime="20240503 14:01:59.967" endtime="20240503 14:02:00.146"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:01.147" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:00.146" endtime="20240503 14:02:01.147"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>087_typeLS.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:01.227" level="INFO" html="true">&lt;a href="087_typeLS.jpg"&gt;&lt;img src="087_typeLS.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:01.148" endtime="20240503 14:02:01.227"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[8]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:01.227" endtime="20240503 14:02:02.227"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:04.228" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:02:02.227" endtime="20240503 14:02:04.228"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>088_typeLS.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:04.282" level="INFO" html="true">&lt;a href="088_typeLS.jpg"&gt;&lt;img src="088_typeLS.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:04.228" endtime="20240503 14:02:04.282"/>
</kw>
<kw name="Get No Entries Found Text" library="SAP_Tcode_Library">
<arg>wnd[0]/sbar/pane[0]</arg>
<msg timestamp="20240503 14:02:04.282" level="INFO">Entries are displayed</msg>
<status status="PASS" starttime="20240503 14:02:04.282" endtime="20240503 14:02:04.282"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:05.283" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:04.282" endtime="20240503 14:02:05.283"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>089_typeLS.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:05.328" level="INFO" html="true">&lt;a href="089_typeLS.jpg"&gt;&lt;img src="089_typeLS.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:05.283" endtime="20240503 14:02:05.328"/>
</kw>
<status status="PASS" starttime="20240503 14:01:57.183" endtime="20240503 14:02:05.328"/>
</kw>
<kw name="Partner type LI" library="WE20">
<kw name="Select Node" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>LI</arg>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</doc>
<status status="PASS" starttime="20240503 14:02:05.328" endtime="20240503 14:02:05.328"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:06.329" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:05.328" endtime="20240503 14:02:06.329"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>090_typeLI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:06.389" level="INFO" html="true">&lt;a href="090_typeLI.jpg"&gt;&lt;img src="090_typeLI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:06.329" endtime="20240503 14:02:06.389"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[46]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:06.389" endtime="20240503 14:02:06.735"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:07.736" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:06.735" endtime="20240503 14:02:07.736"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>091_typeLI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:07.782" level="INFO" html="true">&lt;a href="091_typeLI.jpg"&gt;&lt;img src="091_typeLI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:07.736" endtime="20240503 14:02:07.782"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[1]/usr/ctxtGSO_PTYP-LOW</arg>
<arg>LI</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:02:07.792" level="INFO">Typing text 'LI' into text field 'wnd[1]/usr/ctxtGSO_PTYP-LOW'.</msg>
<status status="PASS" starttime="20240503 14:02:07.782" endtime="20240503 14:02:07.792"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:08.793" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:07.792" endtime="20240503 14:02:08.793"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>092_typeLI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:08.838" level="INFO" html="true">&lt;a href="092_typeLI.jpg"&gt;&lt;img src="092_typeLI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:08.793" endtime="20240503 14:02:08.838"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[8]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:08.838" endtime="20240503 14:02:09.206"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:11.206" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20240503 14:02:09.206" endtime="20240503 14:02:11.206"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>093_typeLI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:11.278" level="INFO" html="true">&lt;a href="093_typeLI.jpg"&gt;&lt;img src="093_typeLI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:11.206" endtime="20240503 14:02:11.278"/>
</kw>
<kw name="Get No Entries Found Text" library="SAP_Tcode_Library">
<arg>wnd[0]/sbar/pane[0]</arg>
<msg timestamp="20240503 14:02:11.278" level="INFO">No entries found that match selection criteria</msg>
<status status="PASS" starttime="20240503 14:02:11.278" endtime="20240503 14:02:11.278"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:12.279" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:11.278" endtime="20240503 14:02:12.279"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>094_typeLI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:12.326" level="INFO" html="true">&lt;a href="094_typeLI.jpg"&gt;&lt;img src="094_typeLI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:12.279" endtime="20240503 14:02:12.326"/>
</kw>
<status status="PASS" starttime="20240503 14:02:05.328" endtime="20240503 14:02:12.326"/>
</kw>
<tag>Migration</tag>
<status status="PASS" starttime="20240503 14:01:55.330" endtime="20240503 14:02:12.326"/>
</test>
<kw name="System Logout" library="WE20" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:02:12.326" endtime="20240503 14:02:12.710"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:17.711" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 14:02:12.710" endtime="20240503 14:02:17.711"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:17.776" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:17.711" endtime="20240503 14:02:17.776"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:27.776" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:02:17.776" endtime="20240503 14:02:27.776"/>
</kw>
<status status="PASS" starttime="20240503 14:02:12.326" endtime="20240503 14:02:27.776"/>
</kw>
<status status="PASS" starttime="20240503 14:01:42.541" endtime="20240503 14:02:27.776"/>
</suite>
<suite id="s1-s15" name="Test WE21" source="C:\SAP_Testing\SAPtesting\Tests\Test_WE21.robot">
<kw name="System Logon" library="WE21" type="SETUP">
<kw name="Start Process" library="Process">
<arg>${symvar('SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240503 14:02:01.683" level="INFO">Sym.Dev.SAP_SERVER: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe</msg>
<msg timestamp="20240503 14:02:01.683" level="INFO">Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"</msg>
<status status="PASS" starttime="20240503 14:02:01.683" endtime="20240503 14:02:01.683"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:11.683" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20240503 14:02:01.683" endtime="20240503 14:02:11.683"/>
</kw>
<kw name="Connect To Session" library="SAP_Tcode_Library">
<doc>Connects to an open session SAP.</doc>
<status status="PASS" starttime="20240503 14:02:11.683" endtime="20240503 14:02:11.687"/>
</kw>
<kw name="Open Connection" library="SAP_Tcode_Library">
<arg>${symvar('SAP_connection')}</arg>
<doc>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</doc>
<msg timestamp="20240503 14:02:11.687" level="INFO">Sym.Dev.SAP_connection: BIS</msg>
<status status="PASS" starttime="20240503 14:02:11.687" endtime="20240503 14:02:12.592"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Client_Id')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:02:12.592" level="INFO">Sym.Dev.Client_Id: 001</msg>
<msg timestamp="20240503 14:02:12.623" level="INFO">Typing text '001' into text field 'wnd[0]/usr/txtRSYST-MANDT'.</msg>
<status status="PASS" starttime="20240503 14:02:12.592" endtime="20240503 14:02:12.623"/>
</kw>
<kw name="Input Text" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('User_Name')}</arg>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.</doc>
<msg timestamp="20240503 14:02:12.623" level="INFO">Sym.Dev.User_Name: SELENIUM</msg>
<msg timestamp="20240503 14:02:12.654" level="INFO">Typing text 'SELENIUM' into text field 'wnd[0]/usr/txtRSYST-BNAME'.</msg>
<status status="PASS" starttime="20240503 14:02:12.623" endtime="20240503 14:02:12.654"/>
</kw>
<kw name="Input Password" library="SAP_Tcode_Library">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>%{SAP_PASSWORD}</arg>
<doc>Inserts the given password into the text field identified by locator.
The password is not recorded in the log.</doc>
<msg timestamp="20240503 14:02:12.654" level="INFO">Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.</msg>
<status status="PASS" starttime="20240503 14:02:12.654" endtime="20240503 14:02:12.654"/>
</kw>
<kw name="Send Vkey" library="SAP_Tcode_Library">
<arg>0</arg>
<doc>Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.</doc>
<status status="PASS" starttime="20240503 14:02:12.654" endtime="20240503 14:02:13.447"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00a_loginpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:13.520" level="INFO" html="true">&lt;a href="00a_loginpage.jpg"&gt;&lt;img src="00a_loginpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:13.447" endtime="20240503 14:02:13.520"/>
</kw>
<kw name="Multiple Logon Handling" library="SAP_Tcode_Library">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="PASS" starttime="20240503 14:02:13.520" endtime="20240503 14:02:13.520"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:14.521" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:13.520" endtime="20240503 14:02:14.521"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>00_multi_logon_handling.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:14.552" level="INFO" html="true">&lt;a href="00_multi_logon_handling.jpg"&gt;&lt;img src="00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:14.521" endtime="20240503 14:02:14.552"/>
</kw>
<status status="PASS" starttime="20240503 14:02:01.683" endtime="20240503 14:02:14.552"/>
</kw>
<test id="s1-s15-t1" name="Executing WE21" line="10">
<kw name="Transaction WE21" library="WE21">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nwe21</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:02:14.552" endtime="20240503 14:02:15.377"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:16.378" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:15.377" endtime="20240503 14:02:16.378"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>095_WE21.JPG</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:16.416" level="INFO" html="true">&lt;a href="095_WE21.JPG"&gt;&lt;img src="095_WE21.JPG" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:16.378" endtime="20240503 14:02:16.416"/>
</kw>
<status status="PASS" starttime="20240503 14:02:14.552" endtime="20240503 14:02:16.416"/>
</kw>
<kw name="Transactional RFC" library="WE21">
<kw name="Select Node" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>A</arg>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</doc>
<status status="PASS" starttime="20240503 14:02:16.416" endtime="20240503 14:02:16.416"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:17.416" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:16.416" endtime="20240503 14:02:17.416"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>096_rfc.JPG</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:17.489" level="INFO" html="true">&lt;a href="096_rfc.JPG"&gt;&lt;img src="096_rfc.JPG" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:17.416" endtime="20240503 14:02:17.489"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/mbar/menu[0]/menu[2]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:17.489" endtime="20240503 14:02:17.821"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:18.821" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:17.821" endtime="20240503 14:02:18.821"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>097_rfc.JPG</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:18.860" level="INFO" html="true">&lt;a href="097_rfc.JPG"&gt;&lt;img src="097_rfc.JPG" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:18.821" endtime="20240503 14:02:18.860"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:18.860" endtime="20240503 14:02:19.347"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:20.348" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:19.347" endtime="20240503 14:02:20.348"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>098_rfc.JPG</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:20.383" level="INFO" html="true">&lt;a href="098_rfc.JPG"&gt;&lt;img src="098_rfc.JPG" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:20.348" endtime="20240503 14:02:20.383"/>
</kw>
<status status="PASS" starttime="20240503 14:02:16.416" endtime="20240503 14:02:20.383"/>
</kw>
<kw name="File Port" library="WE21">
<kw name="Select Node" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>D</arg>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</doc>
<status status="PASS" starttime="20240503 14:02:20.383" endtime="20240503 14:02:20.393"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:21.394" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:20.393" endtime="20240503 14:02:21.394"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>099_fileport.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:21.432" level="INFO" html="true">&lt;a href="099_fileport.jpg"&gt;&lt;img src="099_fileport.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:21.394" endtime="20240503 14:02:21.432"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[20]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:21.432" endtime="20240503 14:02:21.707"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:22.707" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:21.707" endtime="20240503 14:02:22.707"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>100_fileport.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:22.770" level="INFO" html="true">&lt;a href="100_fileport.jpg"&gt;&lt;img src="100_fileport.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:22.707" endtime="20240503 14:02:22.770"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:22.770" endtime="20240503 14:02:23.319"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:24.320" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:23.319" endtime="20240503 14:02:24.320"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>101_fileport.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:24.373" level="INFO" html="true">&lt;a href="101_fileport.jpg"&gt;&lt;img src="101_fileport.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:24.320" endtime="20240503 14:02:24.373"/>
</kw>
<status status="PASS" starttime="20240503 14:02:20.383" endtime="20240503 14:02:24.373"/>
</kw>
<kw name="ABAP-PI" library="WE21">
<kw name="Select Node" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>S</arg>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</doc>
<status status="PASS" starttime="20240503 14:02:24.373" endtime="20240503 14:02:24.377"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:25.377" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:24.377" endtime="20240503 14:02:25.377"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>102_ABAP-PI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:25.443" level="INFO" html="true">&lt;a href="102_ABAP-PI.jpg"&gt;&lt;img src="102_ABAP-PI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:25.377" endtime="20240503 14:02:25.443"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[20]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:25.443" endtime="20240503 14:02:25.723"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:26.723" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:25.723" endtime="20240503 14:02:26.723"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>103_ABAP-PI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:26.799" level="INFO" html="true">&lt;a href="103_ABAP-PI.jpg"&gt;&lt;img src="103_ABAP-PI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:26.723" endtime="20240503 14:02:26.799"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:26.799" endtime="20240503 14:02:27.304"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:28.305" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:27.304" endtime="20240503 14:02:28.305"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>104_ABAP-PI.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:28.376" level="INFO" html="true">&lt;a href="104_ABAP-PI.jpg"&gt;&lt;img src="104_ABAP-PI.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:28.305" endtime="20240503 14:02:28.376"/>
</kw>
<status status="PASS" starttime="20240503 14:02:24.373" endtime="20240503 14:02:28.376"/>
</kw>
<kw name="XML File" library="WE21">
<kw name="Select Node" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>X</arg>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</doc>
<status status="PASS" starttime="20240503 14:02:28.383" endtime="20240503 14:02:28.386"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:29.387" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:28.386" endtime="20240503 14:02:29.387"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>105_XML.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:29.464" level="INFO" html="true">&lt;a href="105_XML.jpg"&gt;&lt;img src="105_XML.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:29.387" endtime="20240503 14:02:29.464"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[20]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:29.464" endtime="20240503 14:02:29.733"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:30.733" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:29.733" endtime="20240503 14:02:30.733"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>106_XML.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:30.800" level="INFO" html="true">&lt;a href="106_XML.jpg"&gt;&lt;img src="106_XML.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:30.733" endtime="20240503 14:02:30.800"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:30.800" endtime="20240503 14:02:31.288"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:32.298" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:31.298" endtime="20240503 14:02:32.298"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>107_XML.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:32.342" level="INFO" html="true">&lt;a href="107_XML.jpg"&gt;&lt;img src="107_XML.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:32.299" endtime="20240503 14:02:32.342"/>
</kw>
<status status="PASS" starttime="20240503 14:02:28.376" endtime="20240503 14:02:32.342"/>
</kw>
<kw name="XML HTTP" library="WE21">
<kw name="Select Node" library="SAP_Tcode_Library">
<arg>wnd[0]/shellcont/shell</arg>
<arg>H</arg>
<doc>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</doc>
<status status="PASS" starttime="20240503 14:02:32.342" endtime="20240503 14:02:32.342"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:33.342" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:32.342" endtime="20240503 14:02:33.342"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>108_HTTP.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:33.406" level="INFO" html="true">&lt;a href="108_HTTP.jpg"&gt;&lt;img src="108_HTTP.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:33.342" endtime="20240503 14:02:33.406"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[0]/tbar[1]/btn[20]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:33.406" endtime="20240503 14:02:33.676"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:34.677" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:33.676" endtime="20240503 14:02:34.677"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>109_HTTP.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:34.716" level="INFO" html="true">&lt;a href="109_HTTP.jpg"&gt;&lt;img src="109_HTTP.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:34.677" endtime="20240503 14:02:34.716"/>
</kw>
<kw name="Click Element" library="SAP_Tcode_Library">
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<doc>Performs a single click on a given element. Used only for buttons, tabs and menu items.</doc>
<status status="PASS" starttime="20240503 14:02:34.716" endtime="20240503 14:02:35.207"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:36.208" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20240503 14:02:35.207" endtime="20240503 14:02:36.208"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>110_HTTP.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:36.264" level="INFO" html="true">&lt;a href="110_HTTP.jpg"&gt;&lt;img src="110_HTTP.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:36.208" endtime="20240503 14:02:36.264"/>
</kw>
<status status="PASS" starttime="20240503 14:02:32.342" endtime="20240503 14:02:36.264"/>
</kw>
<tag>Migration</tag>
<status status="FAIL" starttime="20240503 14:02:14.552" endtime="20240503 14:02:36.264">Parent suite teardown failed:
Execution terminated by signal</status>
</test>
<kw name="System Logout" library="WE21" type="TEARDOWN">
<kw name="Run Transaction" library="SAP_Tcode_Library">
<arg>/nex</arg>
<doc>Runs a Sap transaction. An error is given when an unknown transaction is specified.</doc>
<status status="PASS" starttime="20240503 14:02:36.266" endtime="20240503 14:02:36.621"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240503 14:02:41.621" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20240503 14:02:36.621" endtime="20240503 14:02:41.621"/>
</kw>
<kw name="Take Screenshot" library="SAP_Tcode_Library">
<arg>logoutpage.jpg</arg>
<doc>Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.</doc>
<msg timestamp="20240503 14:02:41.678" level="INFO" html="true">&lt;a href="logoutpage.jpg"&gt;&lt;img src="logoutpage.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20240503 14:02:41.621" endtime="20240503 14:02:41.678"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="FAIL" starttime="20240503 14:02:41.679" endtime="20240503 14:02:42.942"/>
</kw>
<status status="FAIL" starttime="20240503 14:02:36.266" endtime="20240503 14:02:42.942">Execution terminated by signal</status>
</kw>
<status status="FAIL" starttime="20240503 14:02:01.658" endtime="20240503 14:02:42.942">Suite teardown failed:
Execution terminated by signal</status>
</suite>
<doc>Testing functionality through Robot Framework</doc>
<meta name="environment">Dev</meta>
<meta name="test_browser_name">chrome</meta>
<meta name="test_browser_version">124.0.6367.119</meta>
<meta name="test_driver_version">124.0.6367.91 </meta>
<meta name="test_environment">Dev</meta>
<meta name="test_freeze_dependencies">astroid==3.1.0,attrs==23.2.0,beautifulsoup4==4.12.3,bs4==0.0.2,certifi==2024.2.2,cffi==1.16.0,chardet==5.2.0,charset-normalizer==3.3.2,click==8.1.7,colorama==0.4.6,cryptography==42.0.5,defusedxml==0.7.1,dill==0.3.8,docutils==0.20.1,exceptiongroup==1.2.0,gitdb==4.0.11,GitPython==3.1.42,h11==0.14.0,idna==3.6,isort==5.13.2,Jinja2==3.1.3,jira==3.6.0,jsonpath-ng==1.6.1,jsonschema==4.21.1,jsonschema-specifications==2023.12.1,lazy-object-proxy==1.10.0,lxml==5.1.0,markdown-it-py==3.0.0,MarkupSafe==2.1.5,mccabe==0.7.0,mdurl==0.1.2,natsort==8.4.0,oauthlib==3.2.2,outcome==1.3.0.post0,packaging==24.0,pathspec==0.11.2,pillow==10.2.0,pip==24.0,platformdirs==4.2.0,ply==3.11,pycparser==2.21,Pygments==2.17.2,pylint==3.1.0,PySocks==1.7.1,pywin32==306,PyYAML==6.0.1,referencing==0.33.0,requests==2.31.0,requests-oauthlib==1.4.0,requests-toolbelt==1.0.0,rich==13.7.1,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.18.0,selenium==4.9.1,setuptools==69.2.0,smmap==5.0.1,sniffio==1.3.1,sortedcontainers==2.4.0,soupsieve==2.5,tomli==2.0.1,tomlkit==0.12.4,trio==0.24.0,trio-websocket==0.11.1,typing_extensions==4.10.0,urllib3==2.2.1,wheel==0.43.0,wrapt==1.16.0,wsproto==1.2.0</meta>
<status status="FAIL" starttime="20240503 13:56:32.417" endtime="20240503 14:02:43.221"/>
</suite>
<statistics>
<total>
<stat pass="14" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="14" fail="1" skip="0">Migration</stat>
</tag>
<suite>
<stat pass="14" fail="1" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Test AL11">Tests.Test AL11</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Test OAC0">Tests.Test OAC0</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Test SCOT">Tests.Test SCOT</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Test SHMM">Tests.Test SHMM</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Test SLDAPICUST">Tests.Test SLDAPICUST</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Test SM69">Tests.Test SM69</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Test SMLG">Tests.Test SMLG</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Test SMQR">Tests.Test SMQR</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Test SMQS">Tests.Test SMQS</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Test SPAD">Tests.Test SPAD</stat>
<stat pass="1" fail="0" skip="0" id="s1-s11" name="Test STMS">Tests.Test STMS</stat>
<stat pass="1" fail="0" skip="0" id="s1-s12" name="Test STRUST">Tests.Test STRUST</stat>
<stat pass="1" fail="0" skip="0" id="s1-s13" name="Test Uconcockpit">Tests.Test Uconcockpit</stat>
<stat pass="1" fail="0" skip="0" id="s1-s14" name="Test WE20">Tests.Test WE20</stat>
<stat pass="0" fail="1" skip="0" id="s1-s15" name="Test WE21">Tests.Test WE21</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20240503 13:56:50.112" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:51.150" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:52.874" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:56.935" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:02.168" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:49.795" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:51.449" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:52.945" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:54.179" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:55.406" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:56.641" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:56:57.871" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:03.155" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:29.447" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:30.458" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:32.239" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:33.248" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:35.600" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:37.207" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:39.036" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:40.279" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:41.534" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:42.783" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:49.113" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:32.411" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:34.043" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:35.029" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:36.287" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:57:41.619" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:09.016" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:10.026" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:12.231" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:29.090" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:39.371" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:44.653" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:16.203" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:17.796" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:32.045" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:58.868" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:58:59.963" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:01.723" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:03.107" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:04.351" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:05.583" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:06.878" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:08.129" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:13.425" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:11.952" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:12.962" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:13.654" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:19.945" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:39.964" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:40.976" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:41.659" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:42.904" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:43.150" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:43.405" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:43.640" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:46.442" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:47.988" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:49.522" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:51.071" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:52.835" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:58.376" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:46.918" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:48.532" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:50.023" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:50.054" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:51.414" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:52.685" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:52.716" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:54.041" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:55.306" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:55.327" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:56.655" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:57.929" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:57.955" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 13:59:59.268" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:04.558" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:25.670" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:26.681" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:28.955" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:30.939" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:32.447" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:34.464" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:35.945" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:37.435" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:39.140" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:40.625" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:41.900" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:43.159" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:45.222" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:47.402" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:52.637" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:30.854" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:32.559" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:33.895" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:37.961" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:42.498" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:46.564" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:51.064" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:55.126" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:00:59.653" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:03.714" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:08.297" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:12.346" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:16.845" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:20.913" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:26.197" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:20.827" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:22.468" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:23.428" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:27.678" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
<msg timestamp="20240503 14:01:30.972" level="WARN">Taking screenshot failed: OSError: screen grab failed
Make sure tests are run with a physical or virtual display.</msg>
</errors>
</robot>
