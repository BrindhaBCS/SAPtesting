<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.12.4 on win32)" generated="20250225 13:12:38.131" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="C:\SAP_Testing\SAPtesting\Tests">
<kw name="Setup highest level suite" type="SETUP">
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250225 13:12:38.981" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20250225 13:12:38.981" endtime="20250225 13:12:38.981"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250225 13:12:38.982" level="INFO">${screenshotCount} = 0_1</msg>
<status status="PASS" starttime="20250225 13:12:38.982" endtime="20250225 13:12:38.982"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250225 13:12:38.983" level="INFO">${screenshotCount} = 0_1</msg>
<status status="PASS" starttime="20250225 13:12:38.982" endtime="20250225 13:12:38.983"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20250225 13:12:38.984" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20250225 13:12:38.989" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20250225 13:12:38.983" endtime="20250225 13:12:38.989"/>
</kw>
<status status="PASS" starttime="20250225 13:12:38.983" endtime="20250225 13:12:38.989"/>
</kw>
<status status="PASS" starttime="20250225 13:12:38.981" endtime="20250225 13:12:38.989"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250225 13:12:38.990" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20250225 13:12:38.990" endtime="20250225 13:12:38.990"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20250225 13:12:38.991" endtime="20250225 13:12:38.991"/>
</kw>
<msg timestamp="20250225 13:12:38.991" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20250225 13:12:38.990" endtime="20250225 13:12:38.991"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">&amp;{browser_information} = { browser_version=133.0.6943.127 | driver_version=133.0.6943.53  }</msg>
<status status="PASS" starttime="20250225 13:12:38.992" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">Set suite metadata 'test_browser_version' to value '133.0.6943.127'.</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">Set suite metadata 'test_driver_version' to value '133.0.6943.53 '.</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<status status="PASS" starttime="20250225 13:12:38.992" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<msg timestamp="20250225 13:12:42.357" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20250225 13:12:42.357" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<msg timestamp="20250225 13:12:42.357" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">Length is 1</msg>
<msg timestamp="20250225 13:12:42.357" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<msg timestamp="20250225 13:12:42.357" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<msg timestamp="20250225 13:12:42.357" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002B2DD1D5220&gt;</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<msg timestamp="20250225 13:12:42.357" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002B2DD1D5220&gt;</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<status status="NOT RUN" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</iter>
<status status="NOT RUN" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</for>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x000002B2DD1D5220&gt;</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.357"/>
</kw>
<status status="PASS" starttime="20250225 13:12:38.992" endtime="20250225 13:12:42.357"/>
</kw>
<status status="PASS" starttime="20250225 13:12:38.991" endtime="20250225 13:12:42.357"/>
</kw>
<status status="PASS" starttime="20250225 13:12:38.990" endtime="20250225 13:12:42.357"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20250225 13:12:42.357" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20250225 13:12:42.357" endtime="20250225 13:12:42.373"/>
</kw>
<status status="PASS" starttime="20250225 13:12:38.980" endtime="20250225 13:12:42.373"/>
</kw>
<suite id="s1-s1" name="Test Olympus STMS" source="C:\SAP_Testing\SAPtesting\Tests\Test_Olympus_STMS.robot">
<test id="s1-s1-t1" name="SP1_STMS" line="6">
<kw name="STMS" library="Olympus_STMS">
<kw name="Start Process" library="Process">
<arg>${symvar('Olympus_SAP_SERVER')}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20250225 13:12:42.888" level="INFO">Sym.Dev.Olympus_SAP_SERVER: C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe</msg>
<msg timestamp="20250225 13:12:42.888" level="INFO">Starting process:
"C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe"</msg>
<status status="PASS" starttime="20250225 13:12:42.888" endtime="20250225 13:12:42.888"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250225 13:12:43.889" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250225 13:12:42.888" endtime="20250225 13:12:43.889"/>
</kw>
<kw name="Connect To Session">
<msg timestamp="20250225 13:12:43.890" level="FAIL">No keyword with name 'Connect To Session' found.</msg>
<status status="FAIL" starttime="20250225 13:12:43.890" endtime="20250225 13:12:43.890"/>
</kw>
<kw name="Open Connection">
<arg>${symvar('Olympus_SAP_connection')}</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.892" endtime="20250225 13:12:43.892"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.892" endtime="20250225 13:12:43.892"/>
</kw>
<kw name="Input Text">
<arg>wnd[0]/usr/txtRSYST-MANDT</arg>
<arg>${symvar('Olympus_Client_Id')}</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.894" endtime="20250225 13:12:43.894"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.894" endtime="20250225 13:12:43.894"/>
</kw>
<kw name="Input Text">
<arg>wnd[0]/usr/txtRSYST-BNAME</arg>
<arg>${symvar('Olympus_User_Name')}</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.895" endtime="20250225 13:12:43.896"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.896" endtime="20250225 13:12:43.896"/>
</kw>
<kw name="Input Password">
<arg>wnd[0]/usr/pwdRSYST-BCODE</arg>
<arg>${symvar('Olympus_User_Password')}</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.897" endtime="20250225 13:12:43.897"/>
</kw>
<kw name="Send Vkey">
<arg>0</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.898" endtime="20250225 13:12:43.899"/>
</kw>
<kw name="Multiple logon Handling">
<arg>wnd[1]</arg>
<arg>wnd[1]/usr/radMULTI_LOGON_OPT2</arg>
<arg>wnd[1]/tbar[0]/btn[0]</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.900" endtime="20250225 13:12:43.900"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.900" endtime="20250225 13:12:43.900"/>
</kw>
<kw name="Run Transaction">
<arg>/nSTMS</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.902" endtime="20250225 13:12:43.902"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.902" endtime="20250225 13:12:43.902"/>
</kw>
<kw name="Take Screenshot">
<arg>STMS01.jpg</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.903" endtime="20250225 13:12:43.903"/>
</kw>
<kw name="Click Element">
<arg>wnd[0]/tbar[1]/btn[19]</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.905" endtime="20250225 13:12:43.905"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.905" endtime="20250225 13:12:43.905"/>
</kw>
<kw name="Take Screenshot">
<arg>STMS02.jpg</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.906" endtime="20250225 13:12:43.907"/>
</kw>
<kw name="Click Element">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.908" endtime="20250225 13:12:43.908"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.908" endtime="20250225 13:12:43.908"/>
</kw>
<kw name="Click Element">
<arg>wnd[0]/tbar[1]/btn[18]</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.909" endtime="20250225 13:12:43.910"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.910" endtime="20250225 13:12:43.910"/>
</kw>
<kw name="Take Screenshot">
<arg>STMS03.jpg</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.911" endtime="20250225 13:12:43.911"/>
</kw>
<kw name="Double Click Current Cell">
<arg>wnd[0]/usr/cntlGRID1/shellcont/shell</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.913" endtime="20250225 13:12:43.913"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.913" endtime="20250225 13:12:43.913"/>
</kw>
<kw name="Take Screenshot">
<arg>STMS04.jpg</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.915" endtime="20250225 13:12:43.915"/>
</kw>
<kw name="Click Element">
<arg>wnd[0]/usr/tabsGN_DYN150_TAB_STRIP/tabpDOMA</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.918" endtime="20250225 13:12:43.918"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.918" endtime="20250225 13:12:43.918"/>
</kw>
<kw name="Take Screenshot">
<arg>STMS05.jpg</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.920" endtime="20250225 13:12:43.920"/>
</kw>
<kw name="Click Element">
<arg>wnd[0]/usr/tabsGN_DYN150_TAB_STRIP/tabpTPPE</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.921" endtime="20250225 13:12:43.921"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.921" endtime="20250225 13:12:43.921"/>
</kw>
<kw name="Take Screenshot">
<arg>STMS06.jpg</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.922" endtime="20250225 13:12:43.922"/>
</kw>
<kw name="Click Element">
<arg>wnd[0]/tbar[0]/btn[3]</arg>
<status status="NOT RUN" starttime="20250225 13:12:43.924" endtime="20250225 13:12:43.924"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20250225 13:12:43.924" endtime="20250225 13:12:43.924"/>
</kw>
<kw name="Connection_test" library="Olympus_STMS">
<status status="NOT RUN" starttime="20250225 13:12:43.924" endtime="20250225 13:12:43.924"/>
</kw>
<status status="FAIL" starttime="20250225 13:12:42.888" endtime="20250225 13:12:43.924"/>
</kw>
<tag>Regression</tag>
<tag>STMS</tag>
<status status="FAIL" starttime="20250225 13:12:42.888" endtime="20250225 13:12:43.924">No keyword with name 'Connect To Session' found.</status>
</test>
<status status="FAIL" starttime="20250225 13:12:42.373" endtime="20250225 13:12:43.931"/>
</suite>
<doc>Testing functionality through Robot Framework</doc>
<meta name="environment">Dev</meta>
<meta name="test_browser_name">chrome</meta>
<meta name="test_browser_version">133.0.6943.127</meta>
<meta name="test_driver_version">133.0.6943.53 </meta>
<meta name="test_environment">Dev</meta>
<meta name="test_freeze_dependencies">astroid==3.2.3,attrs==23.2.0,beautifulsoup4==4.12.3,bs4==0.0.2,certifi==2024.7.4,cffi==1.16.0,chardet==5.2.0,charset-normalizer==3.3.2,click==8.1.7,colorama==0.4.6,cryptography==42.0.8,defusedxml==0.7.1,dill==0.3.8,docutils==0.21.2,et-xmlfile==1.1.0,ExcelLib==0.0.1b2,exceptiongroup==1.2.2,gitdb==4.0.11,GitPython==3.1.43,h11==0.14.0,idna==3.7,isort==5.13.2,Jinja2==3.1.4,jira==3.8.0,jsonpath-ng==1.6.1,jsonschema==4.23.0,jsonschema-specifications==2023.12.1,lazy-object-proxy==1.10.0,lxml==5.2.2,markdown-it-py==3.0.0,MarkupSafe==2.1.5,mccabe==0.7.0,mdurl==0.1.2,natsort==8.4.0,numpy==2.0.0,oauthlib==3.2.2,openpyxl==3.1.5,outcome==1.3.0.post0,packaging==24.1,pandas==2.2.2,pathspec==0.11.2,pillow==10.4.0,pip==24.1.2,platformdirs==4.2.2,ply==3.11,pycparser==2.22,Pygments==2.18.0,pylint==3.2.5,PySocks==1.7.1,python-dateutil==2.9.0.post0,pytz==2024.1,pywin32==306,PyYAML==6.0.1,referencing==0.35.1,requests==2.32.3,requests-oauthlib==2.0.0,requests-toolbelt==1.0.0,rich==13.7.1,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-excellib==2.0.1,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.19.0,selenium==4.9.1,setuptools==71.0.2,six==1.16.0,smmap==5.0.1,sniffio==1.3.1,sortedcontainers==2.4.0,soupsieve==2.5,tomli==2.0.1,tomlkit==0.13.0,trio==0.26.0,trio-websocket==0.11.1,typing_extensions==4.12.2,tzdata==2024.1,urllib3==2.2.2,wheel==0.43.0,wrapt==1.16.0,wsproto==1.2.0,xlrd==2.0.1,XlsxWriter==3.2.0</meta>
<status status="FAIL" starttime="20250225 13:12:38.621" endtime="20250225 13:12:43.984"/>
</suite>
<statistics>
<total>
<stat pass="0" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1" skip="0">Regression</stat>
<stat pass="0" fail="1" skip="0">STMS</stat>
</tag>
<suite>
<stat pass="0" fail="1" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="0" fail="1" skip="0" id="s1-s1" name="Test Olympus STMS">Tests.Test Olympus STMS</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20250225 13:12:42.872" level="ERROR">Error in file 'C:\SAP_Testing\SAPtesting\Tests\Resource\Olympus_STMS.robot' on line 3: Importing library 'C:\SAP_Testing\SAPtesting\Tests\Resource\SAP_Tcode_Library.py' failed: ModuleNotFoundError: No module named 'fpdf'
Traceback (most recent call last):
  File "C:\SAP_Testing\SAPtesting\Tests\Resource\SAP_Tcode_Library.py", line 18, in &lt;module&gt;
    from fpdf import FPDF
PYTHONPATH:
  C:\SAP_Testing\SAPtesting\Tests\Resource
  C:\SAP_Testing\SAPtesting\RoboEnvironment\Symphony\Scripts\robot.exe
  C:\Program Files\Python312\python312.zip
  C:\Program Files\Python312\DLLs
  C:\Program Files\Python312\Lib
  C:\Program Files\Python312
  C:\SAP_Testing\SAPtesting\RoboEnvironment\Symphony
  C:\SAP_Testing\SAPtesting\RoboEnvironment\Symphony\Lib\site-packages
  C:\SAP_Testing\SAPtesting\RoboEnvironment\Symphony\Lib\site-packages\win32
  C:\SAP_Testing\SAPtesting\RoboEnvironment\Symphony\Lib\site-packages\win32\lib
  C:\SAP_Testing\SAPtesting\RoboEnvironment\Symphony\Lib\site-packages\Pythonwin
  C:\SAP_Testing\SAPtesting\RoboEnvironment\Symphony\Lib\site-packages\setuptools\_vendor
  C:\SAP_Testing\SAPtesting</msg>
</errors>
</robot>
