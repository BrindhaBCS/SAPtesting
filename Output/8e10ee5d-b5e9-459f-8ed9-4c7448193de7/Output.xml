<?xml version="1.0" encoding="utf-8"?>
<robot generated="20241117 08:33:27.043" generator="Rebot 6.0.2 (Python 3.12.4 on win32)" rpa="false" schemaversion="3">
 <suite id="s1" name="Tests" source="C:\Tally\SAPtesting\Tests">
  <kw name="Setup highest level suite" type="SETUP">
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20241117 08:32:50.091">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20241117 08:32:50.091" starttime="20241117 08:32:50.091" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20241117 08:32:50.092">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20241117 08:32:50.092" starttime="20241117 08:32:50.092" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20241117 08:32:50.092">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20241117 08:32:50.092" starttime="20241117 08:32:50.092" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20241117 08:32:50.093">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20241117 08:32:50.100">
       Created directory '&lt;a href="file://C:\Tally\SAPtesting\Output\8e10ee5d-b5e9-459f-8ed9-4c7448193de7\pabot_results\0\Screenshot"&gt;C:\Tally\SAPtesting\Output\8e10ee5d-b5e9-459f-8ed9-4c7448193de7\pabot_results\0\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20241117 08:32:50.101" starttime="20241117 08:32:50.093" status="PASS"/>
     </kw>
     <status endtime="20241117 08:32:50.101" starttime="20241117 08:32:50.093" status="PASS"/>
    </kw>
    <status endtime="20241117 08:32:50.101" starttime="20241117 08:32:50.091" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20241117 08:32:50.101">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20241117 08:32:50.102" starttime="20241117 08:32:50.101" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20241117 08:32:50.102" starttime="20241117 08:32:50.102" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20241117 08:32:50.103">
      ${web_test_check} = True
     </msg>
     <status endtime="20241117 08:32:50.103" starttime="20241117 08:32:50.102" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20241117 08:32:53.472">
         &amp;{browser_information} = { browser_version=131.0.6778.70 | driver_version=130.0.6723.69  }
        </msg>
        <status endtime="20241117 08:32:53.472" starttime="20241117 08:32:50.103" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20241117 08:32:53.473">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20241117 08:32:53.473" starttime="20241117 08:32:53.472" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20241117 08:32:53.474">
         Set suite metadata 'test_browser_version' to value '131.0.6778.70'.
        </msg>
        <status endtime="20241117 08:32:53.474" starttime="20241117 08:32:53.473" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20241117 08:32:53.475">
         Set suite metadata 'test_driver_version' to value '130.0.6723.69 '.
        </msg>
        <status endtime="20241117 08:32:53.475" starttime="20241117 08:32:53.474" status="PASS"/>
       </kw>
       <status endtime="20241117 08:32:53.475" starttime="20241117 08:32:50.103" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20241117 08:32:53.476">
         ${global_browser_options} = None
        </msg>
        <status endtime="20241117 08:32:53.476" starttime="20241117 08:32:53.475" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20241117 08:32:53.477">
         ${docker_check} = not_found
        </msg>
        <status endtime="20241117 08:32:53.477" starttime="20241117 08:32:53.476" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20241117 08:32:53.477">
          Not executing on Docker
         </msg>
         <status endtime="20241117 08:32:53.477" starttime="20241117 08:32:53.477" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20241117 08:32:53.477">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20241117 08:32:53.478" starttime="20241117 08:32:53.477" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20241117 08:32:53.478" starttime="20241117 08:32:53.478" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20241117 08:32:53.478" starttime="20241117 08:32:53.478" status="NOT RUN"/>
       </kw>
       <status endtime="20241117 08:32:53.478" starttime="20241117 08:32:53.475" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20241117 08:32:53.481">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20241117 08:32:53.481" starttime="20241117 08:32:53.479" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20241117 08:32:53.481">
          ${docker_check} = False
         </msg>
         <status endtime="20241117 08:32:53.481" starttime="20241117 08:32:53.479" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20241117 08:32:53.481">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20241117 08:32:53.481">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20241117 08:32:53.481" starttime="20241117 08:32:53.481" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20241117 08:32:53.482" starttime="20241117 08:32:53.482" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20241117 08:32:53.482">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20241117 08:32:53.482" starttime="20241117 08:32:53.482" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20241117 08:32:53.482">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20241117 08:32:53.482" starttime="20241117 08:32:53.478" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20241117 08:32:53.483">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000219187DAA20&gt;
         </msg>
         <status endtime="20241117 08:32:53.483" starttime="20241117 08:32:53.483" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20241117 08:32:53.483">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000219187DAA20&gt;
        </msg>
        <status endtime="20241117 08:32:53.483" starttime="20241117 08:32:53.483" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20241117 08:32:53.484">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20241117 08:32:53.484" starttime="20241117 08:32:53.484" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20241117 08:32:53.484">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20241117 08:32:53.484" starttime="20241117 08:32:53.484" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20241117 08:32:53.485" starttime="20241117 08:32:53.485" status="NOT RUN"/>
          </kw>
          <status endtime="20241117 08:32:53.485" starttime="20241117 08:32:53.485" status="NOT RUN"/>
         </iter>
         <status endtime="20241117 08:32:53.485" starttime="20241117 08:32:53.485" status="NOT RUN"/>
        </for>
        <status endtime="20241117 08:32:53.485" starttime="20241117 08:32:53.483" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20241117 08:32:53.486" starttime="20241117 08:32:53.485" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20241117 08:32:53.486">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000219187DAA20&gt;
        </msg>
        <status endtime="20241117 08:32:53.486" starttime="20241117 08:32:53.486" status="PASS"/>
       </kw>
       <status endtime="20241117 08:32:53.486" starttime="20241117 08:32:53.478" status="PASS"/>
      </kw>
      <status endtime="20241117 08:32:53.486" starttime="20241117 08:32:50.103" status="PASS"/>
     </kw>
     <status endtime="20241117 08:32:53.486" starttime="20241117 08:32:50.103" status="PASS"/>
    </kw>
    <status endtime="20241117 08:32:53.487" starttime="20241117 08:32:50.102" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20241117 08:32:53.487">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20241117 08:32:53.487" starttime="20241117 08:32:53.487" status="PASS"/>
   </kw>
   <status endtime="20241117 08:32:53.487" starttime="20241117 08:32:50.090" status="PASS"/>
  </kw>
  <suite id="s1-s1" name="Test Invoice Overdue" source="C:\Tally\SAPtesting\Tests\Test_Invoice_Overdue.robot">
   <kw library="Invoice_Overdue" name="Login" type="SETUP">
    <kw library="TallyLibrary" name="Login Tally">
     <arg>
      ${symvar('TALLY')}
     </arg>
     <doc>
      Start Tally and return the main window after login.
     </doc>
     <msg level="INFO" timestamp="20241117 08:32:53.683">
      Sym.Dev.TALLY: C:\Program Files\TallyPrime\tally.exe
     </msg>
     <msg level="INFO" timestamp="20241117 08:33:24.452">
      Started Tally with Process ID: 13808
     </msg>
     <status endtime="20241117 08:33:24.452" starttime="20241117 08:32:53.682" status="PASS"/>
    </kw>
    <status endtime="20241117 08:33:24.452" starttime="20241117 08:32:53.682" status="PASS"/>
   </kw>
   <test id="s1-s1-t1" line="8" name="Start And Use Tally">
    <kw library="Invoice_Overdue" name="Start And Use Tally">
     <kw library="TallyLibrary" name="Send Keys To Window">
      <arg>
       ${symvar('Shift_T')}
      </arg>
      <doc>
       Ensure the correct Tally window is focused, then send keystrokes.
      </doc>
      <msg level="INFO" timestamp="20241117 08:33:24.454">
       Sym.Dev.Shift_T: +T
      </msg>
      <msg level="FAIL" timestamp="20241117 08:33:24.454">
       Main window is not set. Start the Tally session first.
      </msg>
      <msg level="INFO" timestamp="20241117 08:33:24.454">
       Sym.Dev.Shift_T: +T
      </msg>
      <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.452" status="FAIL"/>
     </kw>
     <kw library="TallyLibrary" name="Send Keys To Window">
      <arg>
       ${symvar('Shift_D')}
      </arg>
      <doc>
       Ensure the correct Tally window is focused, then send keystrokes.
      </doc>
      <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.454" status="NOT RUN"/>
     </kw>
     <kw library="TallyLibrary" name="Send Keys To Window">
      <arg>
       ${symvar('Shift_S')}
      </arg>
      <doc>
       Ensure the correct Tally window is focused, then send keystrokes.
      </doc>
      <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.454" status="NOT RUN"/>
     </kw>
     <kw library="TallyLibrary" name="Send Keys To Window">
      <arg>
       ${symvar('Shift_O')}
      </arg>
      <doc>
       Ensure the correct Tally window is focused, then send keystrokes.
      </doc>
      <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.454" status="NOT RUN"/>
     </kw>
     <kw library="TallyLibrary" name="Send Keys To Window">
      <arg>
       ${symvar('Shift_R')}
      </arg>
      <doc>
       Ensure the correct Tally window is focused, then send keystrokes.
      </doc>
      <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.454" status="NOT RUN"/>
     </kw>
     <kw library="TallyLibrary" name="Send Keys To Window">
      <arg>
       ${symvar('F2')}
      </arg>
      <doc>
       Ensure the correct Tally window is focused, then send keystrokes.
      </doc>
      <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.454" status="NOT RUN"/>
     </kw>
     <kw library="TallyLibrary" name="Select Period">
      <arg>
       ${symvar('FROM_DATE')}
      </arg>
      <arg>
       ${symvar('TO_DATE')}
      </arg>
      <doc>
       Select a period in Tally by entering the from and to dates.
      </doc>
      <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.454" status="NOT RUN"/>
     </kw>
     <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.452" status="FAIL"/>
    </kw>
    <tag>
     IO
    </tag>
    <tag>
     Regression
    </tag>
    <status endtime="20241117 08:33:24.454" starttime="20241117 08:33:24.452" status="FAIL">
     Main window is not set. Start the Tally session first.
    </status>
   </test>
   <kw library="Invoice_Overdue" name="Logout" type="TEARDOWN">
    <kw library="TallyLibrary" name="Close Tally Window">
     <doc>
      Close the Tally application gracefully.
     </doc>
     <status endtime="20241117 08:33:26.667" starttime="20241117 08:33:24.454" status="PASS"/>
    </kw>
    <status endtime="20241117 08:33:26.667" starttime="20241117 08:33:24.454" status="PASS"/>
   </kw>
   <status endtime="20241117 08:33:26.667" starttime="20241117 08:32:53.487" status="FAIL"/>
  </suite>
  <doc>
   Testing functionality through Robot Framework
  </doc>
  <meta name="environment">
   Dev
  </meta>
  <meta name="test_browser_name">
   chrome
  </meta>
  <meta name="test_browser_version">
   131.0.6778.70
  </meta>
  <meta name="test_driver_version">
   130.0.6723.69
  </meta>
  <meta name="test_environment">
   Dev
  </meta>
  <meta name="test_freeze_dependencies">
   astroid==3.3.5,attrs==24.2.0,beautifulsoup4==4.12.3,bs4==0.0.2,certifi==2024.8.30,cffi==1.17.1,chardet==5.2.0,charset-normalizer==3.4.0,click==8.1.7,colorama==0.4.6,comtypes==1.4.8,cryptography==43.0.3,defusedxml==0.7.1,dill==0.3.9,docutils==0.21.2,exceptiongroup==1.2.2,gitdb==4.0.11,GitPython==3.1.43,h11==0.14.0,idna==3.10,isort==5.13.2,Jinja2==3.1.4,jira==3.8.0,jsonpath-ng==1.7.0,jsonschema==4.23.0,jsonschema-specifications==2024.10.1,keyboard==0.13.5,lazy-object-proxy==1.10.0,lxml==5.3.0,markdown-it-py==3.0.0,MarkupSafe==3.0.2,mccabe==0.7.0,mdurl==0.1.2,MouseInfo==0.1.3,natsort==8.4.0,oauthlib==3.2.2,outcome==1.3.0.post0,packaging==24.2,pathspec==0.11.2,pillow==11.0.0,pip==24.3.1,platformdirs==4.3.6,ply==3.11,PyAutoGUI==0.9.54,pycparser==2.22,PyGetWindow==0.0.9,Pygments==2.18.0,pylint==3.3.1,PyMsgBox==1.0.9,pyperclip==1.9.0,PyRect==0.2.0,PyScreeze==1.0.1,PySocks==1.7.1,pytweening==1.2.0,pywin32==308,pywinauto==0.6.8,PyYAML==6.0.2,referencing==0.35.1,requests==2.32.3,requests-oauthlib==2.0.0,requests-toolbelt==1.0.0,rich==13.9.4,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-SikuliLibrary==2.0.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.21.0,selenium==4.9.1,setuptools==75.4.0,six==1.16.0,smmap==5.0.1,sniffio==1.3.1,sortedcontainers==2.4.0,soupsieve==2.6,tomli==2.0.2,tomlkit==0.13.2,trio==0.27.0,trio-websocket==0.11.1,typing_extensions==4.12.2,urllib3==2.2.3,wheel==0.45.0,wrapt==1.16.0,wsproto==1.2.0
  </meta>
  <status endtime="20241117 08:33:26.728" starttime="20241117 08:32:49.814" status="FAIL"/>
 </suite>
 <statistics>
  <total>
   <stat fail="1" pass="0" skip="0">
    All Tests
   </stat>
  </total>
  <tag>
   <stat fail="1" pass="0" skip="0">
    IO
   </stat>
   <stat fail="1" pass="0" skip="0">
    Regression
   </stat>
  </tag>
  <suite>
   <stat fail="1" id="s1" name="Tests" pass="0" skip="0">
    Tests
   </stat>
   <stat fail="1" id="s1-s1" name="Test Invoice Overdue" pass="0" skip="0">
    Tests.Test Invoice Overdue
   </stat>
  </suite>
 </statistics>
 <errors>
 </errors>
</robot>
